<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/COMO_EXECUTAR.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/COMO_EXECUTAR.txt" />
              <option name="updatedContent" value="===============================================&#10;    GUIA COMPLETO DE EXECUÇÃO - SIMULADOR MULTITHREAD&#10;===============================================&#10;&#10; COMO EXECUTAR O CÓDIGO:&#10;&#10;1. ABRIR TERMINAL na pasta do projeto:&#10;   cd /home/pedro/IdeaProjects/PadroesDEProjeto&#10;&#10;2. COMPILAR (se necessário):&#10;   javac -d bin src/view/*.java src/model/*.java src/controller/*.java&#10;&#10;3. EXECUTAR O SISTEMA MULTITHREAD:&#10;   java -cp bin controller.Orquestradora&#10;&#10;4. EXECUTAR O SISTEMA ORIGINAL (opcional):&#10;   java -cp bin controller.HidrometroController&#10;&#10;===============================================&#10;    COMANDOS DO SISTEMA MULTITHREAD&#10;===============================================&#10;&#10;Quando executar, você verá este menu:&#10;&#10;=== MENU DE COMANDOS ===&#10;0 - Criar novo simulador&#10;1 - Modificar largura do cano de entrada&#10;2 - Modificar largura do cano de saída&#10;3 - Modificar regulagem da torneira&#10;4 - Modificar velocidade da água&#10;5 - Ver medição do hidrômetro&#10;6 - Listar simuladores ativos&#10;7 - Parar simulador&#10;9 - Sair&#10;&#10;===============================================&#10;    EXEMPLO PRÁTICO DE USO&#10;===============================================&#10;&#10; CRIAR SIMULADORES COM PERFIS DIFERENTES:&#10;&#10;Digite: 0&#10;Escolha: 2 (arquivo específico)&#10;→ Cria simulador 1 com configuracao1.txt (residencial baixo)&#10;&#10;Digite: 0&#10;Escolha: 2 (arquivo específico)&#10;→ Cria simulador 2 com configuracao2.txt (comercial médio)&#10;&#10;Digite: 0&#10;Escolha: 2 (arquivo específico)&#10;→ Cria simulador 3 com configuracao3.txt (industrial alto)&#10;&#10;Digite: 6&#10;→ Lista todos os simuladores ativos&#10;&#10; PERFIS DISPONÍVEIS:&#10;- configuracao1.txt: Residencial baixo (20mm, 45%, 0.25 m³/s)&#10;- configuracao2.txt: Comercial médio (32mm, 70%, 0.55 m³/s)&#10;- configuracao3.txt: Industrial alto (48mm, 88%, 0.95 m³/s)&#10;- configuracao4.txt: Economia extrema (12mm, 18%, 0.08 m³/s)&#10;- configuracao5.txt: Industrial máximo (55mm, 98%, 1.35 m³/s)&#10;&#10;===============================================&#10;    SAÍDAS GERADAS&#10;===============================================&#10;&#10;Cada simulador gera um arquivo independente:&#10; saida/leitura_do_hidrometro_1.jpg&#10; saida/leitura_do_hidrometro_2.jpg&#10; saida/leitura_do_hidrometro_3.jpg&#10; saida/leitura_do_hidrometro_4.jpg&#10; saida/leitura_do_hidrometro_5.jpg&#10;&#10;===============================================&#10;    COMANDOS RÁPIDOS PARA TESTE&#10;===============================================&#10;&#10;Sequência para testar rapidamente:&#10;&#10;0 → 2  (cria simulador 1)&#10;0 → 2  (cria simulador 2)&#10;0 → 2  (cria simulador 3)&#10;6      (lista simuladores)&#10;[aguarda alguns segundos]&#10;6      (lista novamente para ver diferenças)&#10;9      (sair)&#10;&#10;===============================================&#10;    DICAS IMPORTANTES&#10;===============================================&#10;&#10;✅ Cada simulador roda em thread separada&#10;✅ Volumes crescem em velocidades diferentes&#10;✅ Modificações são em tempo real&#10;✅ Arquivos de saída são independentes&#10;✅ Sistema original mantido intacto&#10;✅ Suporta até 5 simuladores simultâneos&#10;&#10;===============================================" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/GIT_DIFF.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GIT_DIFF.md" />
              <option name="originalContent" value="# Git Diff: dev_Pedro.Cordeiro vs main&#10;&#10;**Data:** 30/09/2025  &#10;**Branch de desenvolvimento:** dev_Pedro.Cordeiro  &#10;**Branch de referência:** main  &#10;**Comando:** `git diff main..dev_Pedro.Cordeiro`&#10;&#10;---&#10;&#10;## Diferenças Completas&#10;&#10;```diff&#10;diff --git a/.idea/.gitignore b/.idea/.gitignore&#10;new file mode 100644&#10;index 0000000..a0ccf77&#10;--- /dev/null&#10;+++ b/.idea/.gitignore&#10;@@ -0,0 +1,5 @@&#10;+# Default ignored files&#10;+/shelf/&#10;+/workspace.xml&#10;+# Environment-dependent path to Maven home directory&#10;+/mavenHomeManager.xml&#10;diff --git a/.idea/copilot.data.migration.agent.xml b/.idea/copilot.data.migration.agent.xml&#10;new file mode 100644&#10;index 0000000..4ea72a9&#10;--- /dev/null&#10;+++ b/.idea/copilot.data.migration.agent.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;AgentMigrationStateService&quot;&gt;&#10;+    &lt;option name=&quot;migrationStatus&quot; value=&quot;COMPLETED&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/copilot.data.migration.ask.xml b/.idea/copilot.data.migration.ask.xml&#10;new file mode 100644&#10;index 0000000..7ef04e2&#10;--- /dev/null&#10;+++ b/.idea/copilot.data.migration.ask.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;AskMigrationStateService&quot;&gt;&#10;+    &lt;option name=&quot;migrationStatus&quot; value=&quot;COMPLETED&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/copilot.data.migration.edit.xml b/.idea/copilot.data.migration.edit.xml&#10;new file mode 100644&#10;index 0000000..8648f94&#10;--- /dev/null&#10;+++ b/.idea/copilot.data.migration.edit.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;EditMigrationStateService&quot;&gt;&#10;+    &lt;option name=&quot;migrationStatus&quot; value=&quot;COMPLETED&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/copilotDiffState.xml b/.idea/copilotDiffState.xml&#10;new file mode 100644&#10;index 0000000..195b866&#10;--- /dev/null&#10;+++ b/.idea/copilotDiffState.xml&#10;@@ -0,0 +1,17 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;CopilotDiffPersistence&quot;&gt;&#10;+    &lt;option name=&quot;pendingDiffs&quot;&gt;&#10;+      &lt;map&gt;&#10;+        &lt;entry key=&quot;$PROJECT_DIR$/COMO_EXECUTAR.txt&quot;&gt;&#10;+          &lt;value&gt;&#10;+            &lt;PendingDiffInfo&gt;&#10;+              &lt;option name=&quot;filePath&quot; value=&quot;$PROJECT_DIR$/COMO_EXECUTAR.txt&quot; /&gt;&#10;+              &lt;option name=&quot;updatedContent&quot; value=&quot;===============================================&amp;#10;    GUIA COMPLETO DE EXECUÇÃO - SIMULADOR MULTITHREAD&amp;#10;===============================================&amp;#10;&amp;#10; COMO EXECUTAR O CÓDIGO:&amp;#10;&amp;#10;1. ABRIR TERMINAL na pasta do projeto:&amp;#10;   cd /home/pedro/IdeaProjects/PadroesDEProjeto&amp;#10;&amp;#10;2. COMPILAR (se necessário):&amp;#10;   javac -d bin src/view/*.java src/model/*.java src/controller/*.java&amp;#10;&amp;#10;3. EXECUTAR O SISTEMA MULTITHREAD:&amp;#10;   java -cp bin controller.Orquestradora&amp;#10;&amp;#10;4. EXECUTAR O SISTEMA ORIGINAL (opcional):&amp;#10;   java -cp bin controller.HidrometroController&amp;#10;&amp;#10;===============================================&amp;#10;    COMANDOS DO SISTEMA MULTITHREAD&amp;#10;===============================================&amp;#10;&amp;#10;Quando executar, você verá este menu:&amp;#10;&amp;#10;=== MENU DE COMANDOS ===&amp;#10;0 - Criar novo simulador&amp;#10;1 - Modificar largura do cano de entrada&amp;#10;2 - Modificar largura do cano de saída&amp;#10;3 - Modificar regulagem da torneira&amp;#10;4 - Modificar velocidade da água&amp;#10;5 - Ver medição do hidrômetro&amp;#10;6 - Listar simuladores ativos&amp;#10;7 - Parar simulador&amp;#10;9 - Sair&amp;#10;&amp;#10;===============================================&amp;#10;    EXEMPLO PRÁTICO DE USO&amp;#10;===============================================&amp;#10;&amp;#10; CRIAR SIMULADORES COM PERFIS DIFERENTES:&amp;#10;&amp;#10;Digite: 0&amp;#10;Escolha: 2 (arquivo específico)&amp;#10;→ Cria simulador 1 com configuracao1.txt (residencial baixo)&amp;#10;&amp;#10;Digite: 0&amp;#10;Escolha: 2 (arquivo específico)&amp;#10;→ Cria simulador 2 com configuracao2.txt (comercial médio)&amp;#10;&amp;#10;Digite: 0&amp;#10;Escolha: 2 (arquivo específico)&amp;#10;→ Cria simulador 3 com configuracao3.txt (industrial alto)&amp;#10;&amp;#10;Digite: 6&amp;#10;→ Lista todos os simuladores ativos&amp;#10;&amp;#10; PERFIS DISPONÍVEIS:&amp;#10;- configuracao1.txt: Residencial baixo (20mm, 45%, 0.25 m³/s)&amp;#10;- configuracao2.txt: Comercial médio (32mm, 70%, 0.55 m³/s)&amp;#10;- configuracao3.txt: Industrial alto (48mm, 88%, 0.95 m³/s)&amp;#10;- configuracao4.txt: Economia extrema (12mm, 18%, 0.08 m³/s)&amp;#10;- configuracao5.txt: Industrial máximo (55mm, 98%, 1.35 m³/s)&amp;#10;&amp;#10;===============================================&amp;#10;    SAÍDAS GERADAS&amp;#10;===============================================&amp;#10;&amp;#10;Cada simulador gera um arquivo independente:&amp;#10; saida/leitura_do_hidrometro_1.jpg&amp;#10; saida/leitura_do_hidrometro_2.jpg&amp;#10; saida/leitura_do_hidrometro_3.jpg&amp;#10; saida/leitura_do_hidrometro_4.jpg&amp;#10; saida/leitura_do_hidrometro_5.jpg&amp;#10;&amp;#10;===============================================&amp;#10;    COMANDOS RÁPIDOS PARA TESTE&amp;#10;===============================================&amp;#10;&amp;#10;Sequência para testar rapidamente:&amp;#10;&amp;#10;0 → 2  (cria simulador 1)&amp;#10;0 → 2  (cria simulador 2)&amp;#10;0 → 2  (cria simulador 3)&amp;#10;6      (lista simuladores)&amp;#10;[aguarda alguns segundos]&amp;#10;6      (lista novamente para ver diferenças)&amp;#10;9      (sair)&amp;#10;&amp;#10;===============================================&amp;#10;    DICAS IMPORTANTES&amp;#10;===============================================&amp;#10;&amp;#10;✅ Cada simulador roda em thread separada&amp;#10;✅ Volumes crescem em velocidades diferentes&amp;#10;✅ Modificações são em tempo real&amp;#10;✅ Arquivos de saída são independentes&amp;#10;✅ Sistema original mantido intacto&amp;#10;✅ Suporta até 5 simuladores simultâneos&amp;#10;&amp;#10;===============================================&quot; /&gt;&#10;+            &lt;/PendingDiffInfo&gt;&#10;+          &lt;/value&gt;&#10;+        &lt;/entry&gt;&#10;+      &lt;/map&gt;&#10;+    &lt;/option&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/misc.xml b/.idea/misc.xml&#10;new file mode 100644&#10;index 0000000..6f29fee&#10;--- /dev/null&#10;+++ b/.idea/misc.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_21&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;+    &lt;output url=&quot;file://$PROJECT_DIR$/out&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/modules.xml b/.idea/modules.xml&#10;new file mode 100644&#10;index 0000000..e630946&#10;--- /dev/null&#10;+++ b/.idea/modules.xml&#10;@@ -0,0 +1,8 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;ProjectModuleManager&quot;&gt;&#10;+    &lt;modules&gt;&#10;+      &lt;module fileurl=&quot;file://$PROJECT_DIR$/PadroesDEProjeto.iml&quot; filepath=&quot;$PROJECT_DIR$/PadroesDEProjeto.iml&quot; /&gt;&#10;+    &lt;/modules&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/vcs.xml b/.idea/vcs.xml&#10;new file mode 100644&#10;index 0000000..35eb1dd&#10;--- /dev/null&#10;+++ b/.idea/vcs.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;VcsDirectoryMappings&quot;&gt;&#10;+    &lt;mapping directory=&quot;&quot; vcs=&quot;Git&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/PadroesDEProjeto.iml b/PadroesDEProjeto.iml&#10;new file mode 100644&#10;index 0000000..c90834f&#10;--- /dev/null&#10;+++ b/PadroesDEProjeto.iml&#10;@@ -0,0 +1,11 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;module type=&quot;JAVA_MODULE&quot; version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;NewModuleRootManager&quot; inherit-compiler-output=&quot;true&quot;&gt;&#10;+    &lt;exclude-output /&gt;&#10;+    &lt;content url=&quot;file://$MODULE_DIR$&quot;&gt;&#10;+      &lt;sourceFolder url=&quot;file://$MODULE_DIR$/src&quot; isTestSource=&quot;false&quot; /&gt;&#10;+    &lt;/content&gt;&#10;+    &lt;orderEntry type=&quot;inheritedJdk&quot; /&gt;&#10;+    &lt;orderEntry type=&quot;sourceFolder&quot; forTests=&quot;false&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/module&gt;&#10;\ No newline at end of file&#10;diff --git a/RELATORIO_IMPLEMENTACAO_MULTITHREAD.md b/RELATORIO_IMPLEMENTACAO_MULTITHREAD.md&#10;new file mode 100644&#10;index 0000000..1074e1d&#10;--- /dev/null&#10;+++ b/RELATORIO_IMPLEMENTACAO_MULTITHREAD.md&#10;@@ -0,0 +1,84 @@&#10;+===============================================================================&#10;+                    RELATÓRIO DE IMPLEMENTAÇÃO MULTITHREAD&#10;+                    SIMULADOR DE HIDRÔMETROS - PADRÕES DE PROJETO&#10;+===============================================================================&#10;+&#10;+Data: 30 de Setembro de 2025&#10;+Projeto: PadroesDEProjeto&#10;+Repositório: https://github.com/KATY-IFPB/PadroesDEProjeto&#10;+Branch Original: main&#10;+Branch de Desenvolvimento: dev_Pedro.Cordeiro&#10;+Colaborador: Pedro Cordeiro&#10;+&#10;+===============================================================================&#10;+                        RESUMO DAS ALTERAÇÕES PRINCIPAIS&#10;+===============================================================================&#10;+&#10;+Este relatório documenta as modificações realizadas para implementar suporte&#10;+multithread no simulador de hidrômetros, permitindo a execução de até 5 &#10;+simuladores concorrentes com comportamentos completamente independentes.&#10;+&#10;+## ALTERAÇÕES MAIS IMPORTANTES REALIZADAS:&#10;+&#10;+### 1. IMPLEMENTAÇÃO DE NOVA ARQUITETURA MULTITHREAD&#10;+   - Criação da classe Orquestradora.java como controlador principal multithread&#10;+   - Substituição de variáveis estáticas por ConcurrentHashMap para thread-safety&#10;+   - Implementação de AtomicInteger para controle seguro de IDs únicos&#10;+   - Gerenciamento independente de até 5 threads simultâneas&#10;+&#10;+### 2. EVOLUÇÃO DA CLASSE HIDROMETRO PARA THREAD-SAFETY&#10;+   - Adição de ID único para cada simulador (simuladorId)&#10;+   - Implementação de synchronização com 'synchronized' e 'volatile'&#10;+   - Criação de construtor com compatibilidade reversa&#10;+   - Adição de método parar() para encerramento controlado de threads&#10;+   - Modificação do método run() com tratamento adequado de InterruptedException&#10;+&#10;+### 3. EXTENSÃO DA CLASSE DISPLAY PARA SAÍDAS INDEPENDENTES&#10;+   - Suporte a múltiplos simuladores com IDs únicos&#10;+   - Geração de arquivos de saída separados (hidrometro_1.jpg, hidrometro_2.jpg, etc.)&#10;+   - Manutenção de compatibilidade com código original (construtor sem ID)&#10;+   - Implementação de criação automática do diretório de saída&#10;+&#10;+### 4. CRIAÇÃO DE SISTEMA DE CONFIGURAÇÕES FLEXÍVEL&#10;+   - Desenvolvimento de 5 arquivos de configuração específicos (configuracao1.txt - configuracao5.txt)&#10;+   - Perfis diferenciados: residencial baixo, comercial médio, industrial alto, economia extrema, industrial máximo&#10;+   - Sistema de carregamento híbrido (recursos + arquivos locais)&#10;+   - Opções de configuração: padrão, específica por ID, ou personalizada manual&#10;+&#10;+### 5. CORREÇÃO DE PROBLEMAS DO CÓDIGO ORIGINAL&#10;+   - Correção de erro de sintaxe &quot;ocpackage&quot; para &quot;package&quot; em HidrometroController.java&#10;+   - Manutenção total da compatibilidade com sistema original&#10;+   - Preservação de todas as funcionalidades existentes&#10;+&#10;+### 6. IMPLEMENTAÇÃO DE CONTROLES AVANÇADOS&#10;+   - Menu expandido com 9 comandos (vs 5 originais)&#10;+   - Listagem de simuladores ativos com status em tempo real&#10;+   - Modificação individual de parâmetros por simulador&#10;+   - Parada controlada de simuladores específicos&#10;+   - Encerramento seguro de todas as threads&#10;+&#10;+## IMPACTO DAS MODIFICAÇÕES:&#10;+&#10;+### FUNCIONALIDADES ADICIONADAS:&#10;+✓ Capacidade multithread para até 5 simuladores simultâneos&#10;+✓ Comportamentos de entrada, medição e saída completamente independentes&#10;+✓ Thread-safety em todas as operações críticas&#10;+✓ Sistema de configuração flexível e escalável&#10;+✓ Controle granular de cada instância de simulador&#10;+&#10;+### COMPATIBILIDADE PRESERVADA:&#10;+✓ Código original (HidrometroController) mantido funcional&#10;+✓ Todas as classes originais preservadas&#10;+✓ Mesmo comportamento para uso single-thread&#10;+✓ Arquivos de configuração original inalterados&#10;+&#10;+### MELHORIAS DE ARQUITETURA:&#10;+✓ Separação de responsabilidades (Orquestradora vs HidrometroController)&#10;+✓ Implementação de padrões de concorrência Java&#10;+✓ Tratamento adequado de recursos e memória&#10;+✓ Logging e feedback aprimorados para o usuário&#10;+&#10;+===============================================================================&#10;+                            DIFERENÇAS TÉCNICAS (GIT DIFF)&#10;+===============================================================================&#10;+&#10;diff --git a/bin/controller/HidrometroController.class b/bin/controller/HidrometroController.class&#10;index 13a613e..cfb5c24 100644&#10;Binary files a/bin/controller/HidrometroController.class and b/bin/controller/HidrometroController.class differ&#10;diff --git a/bin/controller/Orquestradora.class b/bin/controller/Orquestradora.class&#10;new file mode 100644&#10;index 0000000..716c7dd&#10;Binary files /dev/null and b/bin/controller/Orquestradora.class differ&#10;diff --git a/bin/model/Hidrometro.class b/bin/model/Hidrometro.class&#10;index 0e16db2..fbd931e 100644&#10;Binary files a/bin/model/Hidrometro.class and b/bin/model/Hidrometro.class differ&#10;diff --git a/bin/view/Display.class b/bin/view/Display.class&#10;index 936d560..e005b2f 100644&#10;Binary files a/bin/view/Display.class and b/bin/view/Display.class differ&#10;diff --git a/bin/view/Messages.class b/bin/view/Messages.class&#10;index 57151f2..c735a3f 100644&#10;Binary files a/bin/view/Messages.class and b/bin/view/Messages.class differ&#10;diff --git a/out/production/PadroesDEProjeto/configuracao.txt b/out/production/PadroesDEProjeto/configuracao.txt&#10;new file mode 100644&#10;index 0000000..dfe4282&#10;--- /dev/null&#10;+++ b/out/production/PadroesDEProjeto/configuracao.txt&#10;@@ -0,0 +1,12 @@&#10;+Largura do cano de entrada (em mm) &#10;+25&#10;+Largura do cano de saida (em mm) &#10;+25&#10;+Regulagem da torneira (0 a 100) &#10;+50&#10;+Velocidade da entrada de agua (em  m³/s) &#10;+0.3&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;\ No newline at end of file&#10;diff --git a/out/production/PadroesDEProjeto/controller/HidrometroController.class b/out/production/PadroesDEProjeto/controller/HidrometroController.class&#10;new file mode 100644&#10;index 0000000..cad9e95&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/controller/HidrometroController.class differ&#10;diff --git a/out/production/PadroesDEProjeto/model/Hidrometro.class b/out/production/PadroesDEProjeto/model/Hidrometro.class&#10;new file mode 100644&#10;index 0000000..e86b2f6&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/model/Hidrometro.class differ&#10;diff --git a/out/production/PadroesDEProjeto/module-info.class b/out/production/PadroesDEProjeto/module-info.class&#10;new file mode 100644&#10;index 0000000..3d511cc&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/module-info.class differ&#10;diff --git a/out/production/PadroesDEProjeto/view/Display.class b/out/production/PadroesDEProjeto/view/Display.class&#10;new file mode 100644&#10;index 0000000..3d0013c&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/view/Display.class differ&#10;diff --git a/out/production/PadroesDEProjeto/view/Messages.class b/out/production/PadroesDEProjeto/view/Messages.class&#10;new file mode 100644&#10;index 0000000..f957a52&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/view/Messages.class differ&#10;diff --git a/out/production/PadroesDEProjeto/view/messages.properties b/out/production/PadroesDEProjeto/view/messages.properties&#10;new file mode 100644&#10;index 0000000..2c5b75c&#10;--- /dev/null&#10;+++ b/out/production/PadroesDEProjeto/view/messages.properties&#10;@@ -0,0 +1,20 @@&#10;+HidrometroController.0=Arquivo configuracao.txt n�o encontrado\!&#10;+HidrometroController.1=Hidrometro Inicializado&#10;+HidrometroController.10=Sistema nao Inicializado&#10;+HidrometroController.11=Digite o novo valor&#10;+HidrometroController.12=Valor atualizado com sucesso\!&#10;+HidrometroController.13=Sistema nao Inicializado&#10;+HidrometroController.14=Valor lido:&#10;+HidrometroController.15=Sistema nao Inicializado&#10;+HidrometroController.16=Comando invalido&#10;+HidrometroController.2=Digite o novo valor&#10;+HidrometroController.3=Valor atualizado com sucesso\!&#10;+HidrometroController.4=Sistema nao Inicializado&#10;+HidrometroController.5=Digite o novo valor&#10;+HidrometroController.6=Valor atualizado com sucesso\!&#10;+HidrometroController.7=Sistema nao Inicializado&#10;+HidrometroController.8=Digite o novo valor&#10;+HidrometroController.9=Valor atualizado com sucesso\!&#10;+HidrometroController.17=Lista de Comandos do Sistema \n\n Digite 0 - Para inicializar o Sistema com o arquivo de configura��o \n Digite 1 - Para modificar a largura do cano que entra no hidrometro \n Digite 2 - Para modificar a largura do cano que sai no hidrometro \n Digite 3 - Para regular a torneira de entrada de agua do hidrometro \n Digite 4 - Para modificar a velocidade da agua em metros� \n Digite 5 - Para vizualizar o volume de agua medido pelo hidrometro \n\n&#10;+HidrometroController.18=/configuracao.txt&#10;+HidrometroController.19=Sistema j� foi inicializado&#10;\ No newline at end of file&#10;diff --git a/relatorio_diferencas.txt b/relatorio_diferencas.txt&#10;new file mode 100644&#10;index 0000000..e69de29&#10;diff --git a/saida/leitura_do_hidrometro.jpg b/saida/leitura_do_hidrometro.jpg&#10;index 3c4bacf..ca02160 100644&#10;Binary files a/saida/leitura_do_hidrometro.jpg and b/saida/leitura_do_hidrometro.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_2.jpg b/saida/leitura_do_hidrometro_2.jpg&#10;new file mode 100644&#10;index 0000000..1ea9746&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_2.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_3.jpg b/saida/leitura_do_hidrometro_3.jpg&#10;new file mode 100644&#10;index 0000000..5e0aedb&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_3.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_4.jpg b/saida/leitura_do_hidrometro_4.jpg&#10;new file mode 100644&#10;index 0000000..8b05bda&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_4.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_5.jpg b/saida/leitura_do_hidrometro_5.jpg&#10;new file mode 100644&#10;index 0000000..c55338d&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_5.jpg differ&#10;diff --git a/src/configuracao1.txt b/src/configuracao1.txt&#10;new file mode 100644&#10;index 0000000..a6f75e0&#10;--- /dev/null&#10;+++ b/src/configuracao1.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+20&#10;+Largura do cano de saida (em mm)&#10;+22&#10;+Regulagem da torneira (0 a 100)&#10;+45&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.25&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao2.txt b/src/configuracao2.txt&#10;new file mode 100644&#10;index 0000000..6396d7f&#10;--- /dev/null&#10;+++ b/src/configuracao2.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+32&#10;+Largura do cano de saida (em mm)&#10;+28&#10;+Regulagem da torneira (0 a 100)&#10;+70&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.55&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao3.txt b/src/configuracao3.txt&#10;new file mode 100644&#10;index 0000000..c0f5807&#10;--- /dev/null&#10;+++ b/src/configuracao3.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+48&#10;+Largura do cano de saida (em mm)&#10;+42&#10;+Regulagem da torneira (0 a 100)&#10;+88&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.95&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao4.txt b/src/configuracao4.txt&#10;new file mode 100644&#10;index 0000000..063f298&#10;--- /dev/null&#10;+++ b/src/configuracao4.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+12&#10;+Largura do cano de saida (em mm)&#10;+15&#10;+Regulagem da torneira (0 a 100)&#10;+18&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.08&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao5.txt b/src/configuracao5.txt&#10;new file mode 100644&#10;index 0000000..df72393&#10;--- /dev/null&#10;+++ b/src/configuracao5.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+55&#10;+Largura do cano de saida (em mm)&#10;+50&#10;+Regulagem da torneira (0 a 100)&#10;+98&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+1.35&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/controller/HidrometroController.java b/src/controller/HidrometroController.java&#10;index cf39929..38997e8 100644&#10;--- a/src/controller/HidrometroController.java&#10;+++ b/src/controller/HidrometroController.java&#10;@@ -8,11 +8,11 @@ import view.Messages;&#10; &#10; /**&#10;  * Controlador principal do Hidrometro.&#10;- * &#10;+ *&#10;  * Esta classe gerencia a inicialização e o controle de um objeto Hidrometro,&#10;  * fornecendo um menu interativo via console para manipular atributos do hidrometro&#10;  * como largura do cano, regulagem da torneira, velocidade da água e visualização da medição.&#10;- * &#10;+ *&#10;  * Utiliza a classe {@link Hidrometro} do pacote model para representar o hidrometro real.&#10;  */&#10; public class HidrometroController {&#10;@@ -36,10 +36,10 @@ public class HidrometroController {&#10; &#10; &#9;/**&#10; &#9; * Método principal que inicia a aplicação.&#10;-&#9; * &#10;+&#9; *&#10; &#9; * Cria um menu de interação via console para manipular o hidrometro.&#10; &#9; * Recebe entradas do usuário e executa os comandos correspondentes.&#10;-&#9; * &#10;+&#9; *&#10; &#9; * Comandos disponíveis:&#10; &#9; * &lt;ul&gt;&#10; &#9; *   &lt;li&gt;0 - Inicializar hidrometro&lt;/li&gt;&#10;@@ -49,7 +49,7 @@ public class HidrometroController {&#10; &#9; *   &lt;li&gt;4 - Definir velocidade da água&lt;/li&gt;&#10; &#9; *   &lt;li&gt;5 - Ver medição atual do hidrometro&lt;/li&gt;&#10; &#9; * &lt;/ul&gt;&#10;-&#9; * &#10;+&#9; *&#10; &#9; * @param args argumentos da linha de comando (não utilizados)&#10; &#9; */&#10; &#9;public static void main(String[] args) {&#10;diff --git a/src/controller/Orquestradora.java b/src/controller/Orquestradora.java&#10;new file mode 100644&#10;index 0000000..468763d&#10;--- /dev/null&#10;+++ b/src/controller/Orquestradora.java&#10;@@ -0,0 +1,394 @@&#10;+package controller;&#10;+&#10;+import java.io.InputStream;&#10;+import java.util.Map;&#10;+import java.util.Scanner;&#10;+import java.util.concurrent.ConcurrentHashMap;&#10;+import java.util.concurrent.atomic.AtomicInteger;&#10;+&#10;+import model.Hidrometro;&#10;+import view.Messages;&#10;+&#10;+/**&#10;+ * Orquestradora multithread para gerenciar até 5 simuladores de hidrômetro concorrentes.&#10;+ *&#10;+ * Esta classe mantém o código original &quot;puro&quot; e adiciona capacidade multithread,&#10;+ * permitindo que múltiplos simuladores executem independentemente com comportamentos&#10;+ * de entrada, medição e saída completamente diferentes.&#10;+ */&#10;+public class Orquestradora {&#10;+&#10;+    /** Número máximo de simuladores concorrentes */&#10;+    private static final int MAX_SIMULADORES = 5;&#10;+&#10;+    /** Mapa thread-safe para armazenar os simuladores ativos */&#10;+    private static final Map&lt;Integer, Hidrometro&gt; simuladores = new ConcurrentHashMap&lt;&gt;();&#10;+&#10;+    /** Mapa para armazenar as threads dos simuladores */&#10;+    private static final Map&lt;Integer, Thread&gt; threads = new ConcurrentHashMap&lt;&gt;();&#10;+&#10;+    /** Contador para IDs únicos dos simuladores */&#10;+    private static final AtomicInteger contadorId = new AtomicInteger(1);&#10;+&#10;+    // Constantes de comando do menu (expandido para multithread)&#10;+    private static final int CRIAR_SIMULADOR = 0;&#10;+    private static final int SET_LARGURA_CANO_ENTRADA = 1;&#10;+    private static final int SET_LARGURA_CANO_SAIDA = 2;&#10;+    private static final int SET_REGULAGEM_DA_TORNEIRA = 3;&#10;+    private static final int SET_VELOCIDADE_DA_AGUA = 4;&#10;+    private static final int VER_MEDICAO_DO_HIDROMETRO = 5;&#10;+    private static final int LISTAR_SIMULADORES = 6;&#10;+    private static final int PARAR_SIMULADOR = 7;&#10;+    private static final int SAIR = 9;&#10;+&#10;+    /**&#10;+     * Método principal que inicia a aplicação multithread.&#10;+     */&#10;+    public static void main(String[] args) {&#10;+        System.out.println(&quot;=== SIMULADOR MULTITHREAD DE HIDRÔMETROS ===&quot;);&#10;+        System.out.println(&quot;Capacidade: até &quot; + MAX_SIMULADORES + &quot; simuladores concorrentes&quot;);&#10;+        exibirMenu();&#10;+&#10;+        Scanner sc = new Scanner(System.in);&#10;+&#10;+        while (sc.hasNext()) {&#10;+            int comando = sc.nextInt();&#10;+&#10;+            switch (comando) {&#10;+                case CRIAR_SIMULADOR:&#10;+                    criarSimulador(sc);&#10;+                    break;&#10;+&#10;+                case SET_LARGURA_CANO_ENTRADA:&#10;+                    modificarLarguraCanoEntrada(sc);&#10;+                    break;&#10;+&#10;+                case SET_LARGURA_CANO_SAIDA:&#10;+                    modificarLarguraCanoSaida(sc);&#10;+                    break;&#10;+&#10;+                case SET_REGULAGEM_DA_TORNEIRA:&#10;+                    modificarRegulagemTorneira(sc);&#10;+                    break;&#10;+&#10;+                case SET_VELOCIDADE_DA_AGUA:&#10;+                    modificarVelocidadeAgua(sc);&#10;+                    break;&#10;+&#10;+                case VER_MEDICAO_DO_HIDROMETRO:&#10;+                    verMedicao(sc);&#10;+                    break;&#10;+&#10;+                case LISTAR_SIMULADORES:&#10;+                    listarSimuladores();&#10;+                    break;&#10;+&#10;+                case PARAR_SIMULADOR:&#10;+                    pararSimulador(sc);&#10;+                    break;&#10;+&#10;+                case SAIR:&#10;+                    encerrarTodos();&#10;+                    System.out.println(&quot;Sistema encerrado.&quot;);&#10;+                    return;&#10;+&#10;+                default:&#10;+                    System.out.println(&quot;Comando inválido!&quot;);&#10;+                    break;&#10;+            }&#10;+&#10;+            exibirMenu();&#10;+        }&#10;+&#10;+        sc.close();&#10;+    }&#10;+&#10;+    /**&#10;+     * Exibe o menu de comandos disponíveis.&#10;+     */&#10;+    private static void exibirMenu() {&#10;+        System.out.println(&quot;\n=== MENU DE COMANDOS ===&quot;);&#10;+        System.out.println(&quot;0 - Criar novo simulador&quot;);&#10;+        System.out.println(&quot;1 - Modificar largura do cano de entrada&quot;);&#10;+        System.out.println(&quot;2 - Modificar largura do cano de saída&quot;);&#10;+        System.out.println(&quot;3 - Modificar regulagem da torneira&quot;);&#10;+        System.out.println(&quot;4 - Modificar velocidade da água&quot;);&#10;+        System.out.println(&quot;5 - Ver medição do hidrômetro&quot;);&#10;+        System.out.println(&quot;6 - Listar simuladores ativos&quot;);&#10;+        System.out.println(&quot;7 - Parar simulador&quot;);&#10;+        System.out.println(&quot;9 - Sair&quot;);&#10;+        System.out.print(&quot;Digite o comando: &quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria um novo simulador com configurações do arquivo ou personalizadas.&#10;+     */&#10;+    private static void criarSimulador(Scanner sc) {&#10;+        if (simuladores.size() &gt;= MAX_SIMULADORES) {&#10;+            System.out.println(&quot;Limite máximo de simuladores atingido (&quot; + MAX_SIMULADORES + &quot;).&quot;);&#10;+            return;&#10;+        }&#10;+&#10;+        int id = contadorId.getAndIncrement();&#10;+        if (id &gt; MAX_SIMULADORES) {&#10;+            contadorId.decrementAndGet();&#10;+            System.out.println(&quot;Todos os IDs de simuladores foram utilizados.&quot;);&#10;+            return;&#10;+        }&#10;+&#10;+        System.out.println(&quot;Escolha o tipo de configuração:&quot;);&#10;+        System.out.println(&quot;1 - Usar arquivo de configuração padrão (configuracao.txt)&quot;);&#10;+        System.out.println(&quot;2 - Usar arquivo específico (configuracao&quot; + id + &quot;.txt)&quot;);&#10;+        System.out.println(&quot;3 - Configuração personalizada&quot;);&#10;+        System.out.print(&quot;Opção: &quot;);&#10;+&#10;+        int opcao = sc.nextInt();&#10;+&#10;+        try {&#10;+            Hidrometro hidrometro;&#10;+&#10;+            if (opcao == 1) {&#10;+                hidrometro = criarSimuladorPadrao(id);&#10;+            } else if (opcao == 2) {&#10;+                hidrometro = criarSimuladorEspecifico(id);&#10;+            } else {&#10;+                hidrometro = criarSimuladorPersonalizado(sc, id);&#10;+            }&#10;+&#10;+            Thread thread = new Thread(hidrometro, &quot;Hidrometro-&quot; + id);&#10;+            thread.start();&#10;+&#10;+            simuladores.put(id, hidrometro);&#10;+            threads.put(id, thread);&#10;+&#10;+            System.out.println(&quot;Simulador &quot; + id + &quot; criado e iniciado com sucesso!&quot;);&#10;+            if (opcao == 2) {&#10;+                System.out.println(&quot;Usando configurações do arquivo: configuracao&quot; + id + &quot;.txt&quot;);&#10;+            }&#10;+            System.out.println(&quot;Arquivo de saída: saida/leitura_do_hidrometro_&quot; + id + &quot;.jpg&quot;);&#10;+&#10;+        } catch (Exception e) {&#10;+            System.out.println(&quot;Erro ao criar simulador: &quot; + e.getMessage());&#10;+            contadorId.decrementAndGet(); // Reverte o contador em caso de erro&#10;+        }&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria simulador com configurações do arquivo padrão.&#10;+     */&#10;+    private static Hidrometro criarSimuladorPadrao(int id) throws Exception {&#10;+        return carregarConfiguracaoDeArquivo(id, &quot;/configuracao.txt&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria simulador com configurações de arquivo específico.&#10;+     */&#10;+    private static Hidrometro criarSimuladorEspecifico(int id) throws Exception {&#10;+        return carregarConfiguracaoDeArquivo(id, &quot;/configuracao&quot; + id + &quot;.txt&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Carrega configuração de um arquivo específico.&#10;+     */&#10;+    private static Hidrometro carregarConfiguracaoDeArquivo(int id, String nomeArquivo) throws Exception {&#10;+        // Tenta carregar como recurso primeiro, depois como arquivo local&#10;+        InputStream inputStream = Orquestradora.class.getResourceAsStream(nomeArquivo);&#10;+&#10;+        if (inputStream == null) {&#10;+            // Se não encontrar como recurso, tenta carregar do diretório src/&#10;+            String caminhoLocal = &quot;src&quot; + nomeArquivo;&#10;+            try {&#10;+                inputStream = new java.io.FileInputStream(caminhoLocal);&#10;+            } catch (java.io.FileNotFoundException e) {&#10;+                throw new Exception(&quot;Arquivo de configuração não encontrado: &quot; + nomeArquivo + &quot; nem em &quot; + caminhoLocal);&#10;+            }&#10;+        }&#10;+&#10;+        try (Scanner scanner = new Scanner(inputStream)) {&#10;+            scanner.nextLine(); // Pula descrição&#10;+            double larguraCanoEntrada = Double.parseDouble(scanner.nextLine());&#10;+            scanner.nextLine(); // Pula descrição&#10;+            double larguraCanoSaida = Double.parseDouble(scanner.nextLine());&#10;+            scanner.nextLine(); // Pula descrição&#10;+            int regulagemDaTorneira = Integer.parseInt(scanner.nextLine());&#10;+            scanner.nextLine(); // Pula descrição&#10;+            double velocidadeDaAgua = Double.parseDouble(scanner.nextLine());&#10;+&#10;+            System.out.println(&quot;Configuração carregada do arquivo &quot; + nomeArquivo + &quot;:&quot;);&#10;+            System.out.println(&quot;- Largura entrada: &quot; + larguraCanoEntrada + &quot; mm&quot;);&#10;+            System.out.println(&quot;- Largura saída: &quot; + larguraCanoSaida + &quot; mm&quot;);&#10;+            System.out.println(&quot;- Regulagem torneira: &quot; + regulagemDaTorneira + &quot;%&quot;);&#10;+            System.out.println(&quot;- Velocidade água: &quot; + velocidadeDaAgua + &quot; m³/s&quot;);&#10;+&#10;+            return new Hidrometro(id, regulagemDaTorneira, larguraCanoEntrada,&#10;+                                larguraCanoSaida, velocidadeDaAgua);&#10;+        }&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria simulador com configurações personalizadas.&#10;+     */&#10;+    private static Hidrometro criarSimuladorPersonalizado(Scanner sc, int id) {&#10;+        System.out.print(&quot;Largura do cano de entrada (mm): &quot;);&#10;+        double larguraCanoEntrada = sc.nextDouble();&#10;+&#10;+        System.out.print(&quot;Largura do cano de saída (mm): &quot;);&#10;+        double larguraCanoSaida = sc.nextDouble();&#10;+&#10;+        System.out.print(&quot;Regulagem da torneira (0-100): &quot;);&#10;+        int regulagemDaTorneira = sc.nextInt();&#10;+&#10;+        System.out.print(&quot;Velocidade da água (m³/s): &quot;);&#10;+        double velocidadeDaAgua = sc.nextDouble();&#10;+&#10;+        return new Hidrometro(id, regulagemDaTorneira, larguraCanoEntrada,&#10;+                            larguraCanoSaida, velocidadeDaAgua);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a largura do cano de entrada de um simulador específico.&#10;+     */&#10;+    private static void modificarLarguraCanoEntrada(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova largura do cano de entrada (mm): &quot;);&#10;+        double novoValor = sc.nextDouble();&#10;+&#10;+        hidrometro.setLarguraCanoEntrada(novoValor);&#10;+        System.out.println(&quot;Largura do cano de entrada do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a largura do cano de saída de um simulador específico.&#10;+     */&#10;+    private static void modificarLarguraCanoSaida(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova largura do cano de saída (mm): &quot;);&#10;+        double novoValor = sc.nextDouble();&#10;+&#10;+        hidrometro.setLarguraCanoSaida(novoValor);&#10;+        System.out.println(&quot;Largura do cano de saída do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a regulagem da torneira de um simulador específico.&#10;+     */&#10;+    private static void modificarRegulagemTorneira(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova regulagem da torneira (0-100): &quot;);&#10;+        int novoValor = sc.nextInt();&#10;+&#10;+        hidrometro.setTorneiraRegulagem(novoValor);&#10;+        System.out.println(&quot;Regulagem da torneira do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a velocidade da água de um simulador específico.&#10;+     */&#10;+    private static void modificarVelocidadeAgua(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova velocidade da água (m³/s): &quot;);&#10;+        double novoValor = sc.nextDouble();&#10;+&#10;+        hidrometro.setVelocidadeAguaEntrada(novoValor);&#10;+        System.out.println(&quot;Velocidade da água do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Exibe a medição atual de um simulador específico.&#10;+     */&#10;+    private static void verMedicao(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        int volume = (int) hidrometro.getVolumeAcumulado();&#10;+        System.out.println(&quot;Simulador &quot; + id + &quot; - Volume medido: &quot; + volume + &quot; m³&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Lista todos os simuladores ativos.&#10;+     */&#10;+    private static void listarSimuladores() {&#10;+        if (simuladores.isEmpty()) {&#10;+            System.out.println(&quot;Nenhum simulador ativo.&quot;);&#10;+            return;&#10;+        }&#10;+&#10;+        System.out.println(&quot;\n=== SIMULADORES ATIVOS ===&quot;);&#10;+        simuladores.forEach((id, hidrometro) -&gt; {&#10;+            System.out.printf(&quot;ID: %d | Volume: %d m³ | Regulagem: %d%% | Status: %s%n&quot;,&#10;+                id,&#10;+                (int) hidrometro.getVolumeAcumulado(),&#10;+                hidrometro.getTorneiraRegulagem(),&#10;+                threads.get(id).isAlive() ? &quot;Ativo&quot; : &quot;Parado&quot;&#10;+            );&#10;+        });&#10;+    }&#10;+&#10;+    /**&#10;+     * Para um simulador específico.&#10;+     */&#10;+    private static void pararSimulador(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        Thread thread = threads.get(id);&#10;+&#10;+        hidrometro.parar();&#10;+        thread.interrupt();&#10;+&#10;+        simuladores.remove(id);&#10;+        threads.remove(id);&#10;+&#10;+        System.out.println(&quot;Simulador &quot; + id + &quot; parado e removido.&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Seleciona um simulador ativo pelo ID.&#10;+     */&#10;+    private static int selecionarSimulador(Scanner sc) {&#10;+        if (simuladores.isEmpty()) {&#10;+            System.out.println(&quot;Nenhum simulador ativo.&quot;);&#10;+            return -1;&#10;+        }&#10;+&#10;+        listarSimuladores();&#10;+        System.out.print(&quot;Digite o ID do simulador: &quot;);&#10;+        int id = sc.nextInt();&#10;+&#10;+        if (!simuladores.containsKey(id)) {&#10;+            System.out.println(&quot;Simulador com ID &quot; + id + &quot; não encontrado.&quot;);&#10;+            return -1;&#10;+        }&#10;+&#10;+        return id;&#10;+    }&#10;+&#10;+    /**&#10;+     * Encerra todos os simuladores ativos.&#10;+     */&#10;+    private static void encerrarTodos() {&#10;+        System.out.println(&quot;Encerrando todos os simuladores...&quot;);&#10;+&#10;+        simuladores.values().forEach(Hidrometro::parar);&#10;+        threads.values().forEach(Thread::interrupt);&#10;+&#10;+        simuladores.clear();&#10;+        threads.clear();&#10;+&#10;+        System.out.println(&quot;Todos os simuladores foram encerrados.&quot;);&#10;+    }&#10;+}&#10;diff --git a/src/model/Hidrometro.java b/src/model/Hidrometro.java&#10;index cb29997..e53fa31 100644&#10;--- a/src/model/Hidrometro.java&#10;+++ b/src/model/Hidrometro.java&#10;@@ -5,52 +5,67 @@ import view.Display;&#10; /**&#10;  * Representa um Hidrometro que monitora e registra o volume de água&#10;  * que passa por um sistema hidráulico.&#10;- * &#10;+ *&#10;  * A classe implementa {@link Runnable}, permitindo que seja executada&#10;  * em uma thread separada para atualizar continuamente o volume acumulado.&#10;  */&#10; public class Hidrometro implements Runnable {&#10; &#10;+    /** ID único do simulador (1-5) */&#10;+    private final int simuladorId;&#10;+&#10;     /** Volume máximo que o hidrometro pode registrar antes de zerar (em m³) */&#10;     private double volumeMaximo = 99999999;&#10; &#10;     /** Volume total acumulado registrado pelo hidrometro (em m³) */&#10;-    private double volumeAcumulado;&#10;+    private volatile double volumeAcumulado;&#10; &#10;     /** Largura do cano de entrada (em metros) */&#10;-    private double larguraCanoEntrada;&#10;+    private volatile double larguraCanoEntrada;&#10; &#10;     /** Largura do cano de saída (em metros) */&#10;-    private double larguraCanoSaida;&#10;+    private volatile double larguraCanoSaida;&#10; &#10;     /** Regulação da torneira em percentual (0 a 100) */&#10;-    private int torneiraRegulagem;&#10;+    private volatile int torneiraRegulagem;&#10; &#10;     /** Velocidade da água na entrada (em m/s) */&#10;-    private double velocidadeAguaEntrada;&#10;+    private volatile double velocidadeAguaEntrada;&#10;+&#10;+    private Display display; // Para exibição visual&#10;+&#10;+    /** Flag para controlar execução da thread */&#10;+    private volatile boolean executando = true;&#10; &#10;-     private Display display; // Futuro uso para exibição visual&#10;+    /**&#10;+     * Construtor original do Hidrometro (compatibilidade).&#10;+     */&#10;+    public Hidrometro(int torneiraRegulagem, double larguraCanoEntrada, double larguraCanoSaida, double velocidadeAguaEntrada) {&#10;+        this(1, torneiraRegulagem, larguraCanoEntrada, larguraCanoSaida, velocidadeAguaEntrada);&#10;+    }&#10; &#10;     /**&#10;-     * Construtor do Hidrometro.&#10;+     * Construtor do Hidrometro com ID de simulador.&#10;      *&#10;+     * @param simuladorId ID único do simulador (1-5)&#10;      * @param torneiraRegulagem percentual de abertura da torneira&#10;      * @param larguraCanoEntrada largura do cano de entrada (m)&#10;      * @param larguraCanoSaida largura do cano de saída (m)&#10;      * @param velocidadeAguaEntrada velocidade da água na entrada (m/s)&#10;      */&#10;-    public Hidrometro(int torneiraRegulagem, double larguraCanoEntrada, double larguraCanoSaida, double velocidadeAguaEntrada) {&#10;+    public Hidrometro(int simuladorId, int torneiraRegulagem, double larguraCanoEntrada, double larguraCanoSaida, double velocidadeAguaEntrada) {&#10;+        this.simuladorId = simuladorId;&#10;         this.volumeAcumulado = 0.0;&#10;         this.larguraCanoEntrada = larguraCanoEntrada;&#10;         this.larguraCanoSaida = larguraCanoSaida;&#10;         this.torneiraRegulagem = torneiraRegulagem;&#10;         this.velocidadeAguaEntrada = velocidadeAguaEntrada;&#10;-        display = new Display((int)volumeAcumulado);&#10;+        display = new Display((int)volumeAcumulado, simuladorId);&#10;     }&#10; &#10;     /**&#10;      * Calcula a área da seção transversal do cano de entrada.&#10;-     * &#10;+     *&#10;      * @return área em m²&#10;      */&#10;     private double calcularArea() {&#10;@@ -59,9 +74,9 @@ public class Hidrometro implements Runnable {&#10; &#10;     /**&#10;      * Calcula a vazão instantânea de água no hidrometro.&#10;-     * &#10;+     *&#10;      * Considera a área do cano, a velocidade da água e a regulagem da torneira.&#10;-     * &#10;+     *&#10;      * @return vazão em m³/s&#10;      */&#10;     private double calcularVazao() {&#10;@@ -71,10 +86,10 @@ public class Hidrometro implements Runnable {&#10; &#10;     /**&#10;      * Atualiza o volume acumulado de água após um intervalo de tempo.&#10;-     * &#10;+     *&#10;      * @param tempoSegundos tempo decorrido em segundos&#10;      */&#10;-    public void registrarConsumo(double tempoSegundos) {&#10;+    public synchronized void registrarConsumo(double tempoSegundos) {&#10;         double vazao = calcularVazao(); // m³/s&#10;         double volume = vazao * tempoSegundos; // m³&#10;         this.volumeAcumulado += volume;&#10;@@ -87,75 +102,83 @@ public class Hidrometro implements Runnable {&#10;         display.gerarImagem();&#10;     }&#10; &#10;-    // ================= Getters e Setters =================&#10;+    // ================= Getters e Setters (thread-safe) =================&#10; &#10;-    public double getVolumeMaximo() {&#10;+    public synchronized double getVolumeMaximo() {&#10;         return volumeMaximo;&#10;     }&#10; &#10;-    public void setVolumeMaximo(double volumeMaximo) {&#10;+    public synchronized void setVolumeMaximo(double volumeMaximo) {&#10;         this.volumeMaximo = volumeMaximo;&#10;     }&#10; &#10;-    public double getVolumeAcumulado() {&#10;+    public synchronized double getVolumeAcumulado() {&#10;         return volumeAcumulado;&#10;     }&#10; &#10;-    public void setVolumeAcumulado(double volumeAcumulado) {&#10;+    public synchronized void setVolumeAcumulado(double volumeAcumulado) {&#10;         this.volumeAcumulado = volumeAcumulado;&#10;     }&#10; &#10;-    public double getLarguraCanoEntrada() {&#10;+    public synchronized double getLarguraCanoEntrada() {&#10;         return larguraCanoEntrada;&#10;     }&#10; &#10;-    public void setLarguraCanoEntrada(double larguraCanoEntrada) {&#10;+    public synchronized void setLarguraCanoEntrada(double larguraCanoEntrada) {&#10;         this.larguraCanoEntrada = larguraCanoEntrada;&#10;     }&#10; &#10;-    public double getLarguraCanoSaida() {&#10;+    public synchronized double getLarguraCanoSaida() {&#10;         return larguraCanoSaida;&#10;     }&#10; &#10;-    public void setLarguraCanoSaida(double larguraCanoSaida) {&#10;+    public synchronized void setLarguraCanoSaida(double larguraCanoSaida) {&#10;         this.larguraCanoSaida = larguraCanoSaida;&#10;     }&#10; &#10;-    public int getTorneiraRegulagem() {&#10;+    public synchronized int getTorneiraRegulagem() {&#10;         return torneiraRegulagem;&#10;     }&#10; &#10;-    public void setTorneiraRegulagem(int torneiraRegulagem) {&#10;+    public synchronized void setTorneiraRegulagem(int torneiraRegulagem) {&#10;         this.torneiraRegulagem = torneiraRegulagem;&#10;     }&#10; &#10;-    public double getVelocidadeAguaEntrada() {&#10;+    public synchronized double getVelocidadeAguaEntrada() {&#10;         return velocidadeAguaEntrada;&#10;     }&#10; &#10;-    public void setVelocidadeAguaEntrada(double velocidadeAguaEntrada) {&#10;+    public synchronized void setVelocidadeAguaEntrada(double velocidadeAguaEntrada) {&#10;         this.velocidadeAguaEntrada = velocidadeAguaEntrada;&#10;     }&#10; &#10;+    public int getSimuladorId() {&#10;+        return simuladorId;&#10;+    }&#10;+&#10;+    public void parar() {&#10;+        executando = false;&#10;+    }&#10;+&#10;     // ================= Runnable =================&#10; &#10;     /**&#10;      * Executa o hidrometro em uma thread separada.&#10;-     * &#10;+     *&#10;      * Atualiza o volume acumulado a cada segundo de forma contínua.&#10;      */&#10;     @Override&#10;     public void run() {&#10;-        while (true) {&#10;+        while (executando) {&#10;             registrarConsumo(1.0); // atualiza a cada segundo&#10; &#10;             try {&#10;                 Thread.sleep(1000); // pausa de 1 segundo&#10;             } catch (InterruptedException e) {&#10;-                e.printStackTrace();&#10;+                executando = false;&#10;+                Thread.currentThread().interrupt();&#10;+                break;&#10;             }&#10;-&#10;         }&#10;     }&#10;-&#10; }&#10;diff --git a/src/view/Display.java b/src/view/Display.java&#10;index 2360c1d..24b1f54 100644&#10;--- a/src/view/Display.java&#10;+++ b/src/view/Display.java&#10;@@ -22,14 +22,28 @@ public class Display {&#10; &#9;/** Valor que será exibido no display (leitura do hidrômetro). */&#10; &#9;private int numeroDisplay;&#10; &#10;+&#9;/** ID do simulador para gerar arquivos de saída únicos */&#10;+&#9;private int simuladorId;&#10;+&#10; &#9;/**&#10; &#9; * Construtor da classe Display.&#10; &#9; *&#10; &#9; * @param numeroDisplay valor inicial a ser exibido no display&#10; &#9; */&#10; &#9;public Display(int numeroDisplay) {&#10;+&#9;&#9;this(numeroDisplay, 1); // Compatibilidade com código original&#10;+&#9;}&#10;+&#10;+&#9;/**&#10;+&#9; * Construtor da classe Display com ID do simulador.&#10;+&#9; *&#10;+&#9; * @param numeroDisplay valor inicial a ser exibido no display&#10;+&#9; * @param simuladorId ID do simulador (1-5)&#10;+&#9; */&#10;+&#9;public Display(int numeroDisplay, int simuladorId) {&#10; &#9;&#9;super();&#10; &#9;&#9;this.numeroDisplay = numeroDisplay;&#10;+&#9;&#9;this.simuladorId = simuladorId;&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10;@@ -61,7 +75,7 @@ public class Display {&#10; &#9; *   &lt;li&gt;Formata o número do display para 8 dígitos, adicionando zeros à esquerda.&lt;/li&gt;&#10; &#9; *   &lt;li&gt;Insere espaços entre os dígitos para simular melhor a leitura.&lt;/li&gt;&#10; &#9; *   &lt;li&gt;Desenha o texto na posição (290, 180) da imagem.&lt;/li&gt;&#10;-&#9; *   &lt;li&gt;Salva o resultado em &quot;saida/leitura_do_hidrometro.jpg&quot;.&lt;/li&gt;&#10;+&#9; *   &lt;li&gt;Salva o resultado em &quot;saida/leitura_do_hidrometro_[id].jpg&quot;.&lt;/li&gt;&#10; &#9; * &lt;/ol&gt;&#10; &#9; *&#10; &#9; * Em caso de erro, a exceção será exibida no console.&#10;@@ -88,8 +102,11 @@ public class Display {&#10;             // Finalizar edição&#10;             g2d.dispose();&#10; &#10;-            // 6. Salvar a imagem editada em JPG&#10;-            ImageIO.write(imagem, &quot;jpg&quot;, new File(&quot;saida/leitura_do_hidrometro.jpg&quot;));&#10;+            // 6. Salvar a imagem editada em JPG com ID único&#10;+            String nomeArquivo = (simuladorId == 1) ?&#10;+                &quot;saida/leitura_do_hidrometro.jpg&quot; :  // Compatibilidade com original&#10;+                &quot;saida/leitura_do_hidrometro_&quot; + simuladorId + &quot;.jpg&quot;;&#10;+            ImageIO.write(imagem, &quot;jpg&quot;, new File(nomeArquivo));&#10; &#10;            // System.out.println(&quot;Imagem editada com sucesso! &quot; + numeroDisplay);&#10;         } catch (Exception e) {&#10;```&#10;&#10;---&#10;&#10;*Diff gerado automaticamente em 30/09/2025 às 22:30*&#10;" />
              <option name="updatedContent" value="# Relatório de Evolução de Software&#10;## Implementação de Arquitetura Multithread&#10;&#10;---&#10;&#10;**Projeto:**&#10;Simulador de Hidrômetros - Padrões de Projeto&#10;&#10;**Repositório Proprietário:**&#10;`https://github.com/KATY-IFPB/PadroesDEProjeto`&#10;&#10;**Colaborador:**&#10;Pedro Cordeiro (`dev_Pedro.Cordeiro`)&#10;&#10;**Data:**&#10;30 de Setembro de 2025&#10;&#10;---&#10;&#10;## 1. Resumo das Alterações&#10;&#10;Este relatório documenta as modificações realizadas no projeto **Simulador de Hidrômetros** para adicionar suporte a uma arquitetura multithread. O objetivo principal foi permitir a execução simultânea de até 5 (cinco) instâncias do simulador, garantindo que cada uma possua comportamentos de entrada, medição e saída completamente independentes e seguros (*thread-safe*).&#10;&#10;A seguir, são destacadas as alterações mais importantes implementadas.&#10;&#10;---&#10;&#10;## 2. Principais Contribuições&#10;&#10;#### 2.1. Nova Arquitetura de Orquestração Multithread&#10;* **`Orquestradora.java`**: Criação de uma nova classe que atua como ponto de entrada e controladora principal, responsável por gerenciar o ciclo de vida de múltiplas instâncias do simulador.&#10;* **Thread-Safety**: Substituição de variáveis estáticas por estruturas de dados concorrentes (`ConcurrentHashMap`) e contadores atômicos (`AtomicInteger`) para garantir a integridade dos dados em ambiente paralelo.&#10;&#10;#### 2.2. Evolução da Classe `Hidrometro` para Concorrência&#10;* **Isolamento de Instâncias**: Adição de um `simuladorId` único para cada hidrômetro, permitindo o rastreamento e a operação individual.&#10;* **Sincronização**: Implementação de blocos `synchronized` e uso de `volatile` em variáveis críticas para garantir a visibilidade das alterações entre as threads.&#10;* **Controle de Ciclo de Vida**: Adição do método `parar()` para permitir o encerramento controlado (*graceful shutdown*) de threads específicas.&#10;&#10;#### 2.3. Sistema de Configuração e Saídas Independentes&#10;* **Arquivos de Configuração**: Criação de 5 arquivos de configuração distintos (`configuracao1.txt` a `configuracao5.txt`), cada um com um perfil de consumo diferente (ex: residencial, comercial, industrial).&#10;* **Saídas Independentes**: A classe `Display` foi estendida para gerar arquivos de imagem de saída separados para cada simulador (ex: `hidrometro_1.jpg`, `hidrometro_2.jpg`), evitando a sobreposição de dados.&#10;&#10;#### 2.4. Melhorias na Interação e Controle&#10;* **Interface de Controle**: O menu de interação foi expandido para 9 comandos (em comparação aos 5 originais), permitindo listar simuladores ativos, modificar parâmetros individuais em tempo real e parar instâncias específicas ou todas de uma vez.&#10;* **Correções e Compatibilidade**: Foi corrigido um erro de sintaxe (`ocpackage`) no código original e garantida total retrocompatibilidade, permitindo que o sistema ainda funcione em modo single-thread como antes.&#10;&#10;---&#10;&#10;## 3. Análise de Diferenças Técnicas (`git diff`)&#10;&#10;A seção a seguir apresenta o `diff` detalhado, extraído diretamente do GitHub, comparando a branch de desenvolvimento `dev_Pedro.Cordeiro` com a branch `main` original. O `diff` evidencia a adição de novas classes, como a `Orquestradora`, e as modificações pontuais para garantir a segurança em ambiente concorrente.&#10;&#10;```diff&#10;diff --git a/.idea/.gitignore b/.idea/.gitignore&#10;new file mode 100644&#10;index 0000000..a0ccf77&#10;--- /dev/null&#10;+++ b/.idea/.gitignore&#10;@@ -0,0 +1,5 @@&#10;+# Default ignored files&#10;+/shelf/&#10;+/workspace.xml&#10;+# Environment-dependent path to Maven home directory&#10;+/mavenHomeManager.xml&#10;diff --git a/.idea/copilot.data.migration.agent.xml b/.idea/copilot.data.migration.agent.xml&#10;new file mode 100644&#10;index 0000000..4ea72a9&#10;--- /dev/null&#10;+++ b/.idea/copilot.data.migration.agent.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;AgentMigrationStateService&quot;&gt;&#10;+    &lt;option name=&quot;migrationStatus&quot; value=&quot;COMPLETED&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/copilot.data.migration.ask.xml b/.idea/copilot.data.migration.ask.xml&#10;new file mode 100644&#10;index 0000000..7ef04e2&#10;--- /dev/null&#10;+++ b/.idea/copilot.data.migration.ask.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;AskMigrationStateService&quot;&gt;&#10;+    &lt;option name=&quot;migrationStatus&quot; value=&quot;COMPLETED&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/copilot.data.migration.edit.xml b/.idea/copilot.data.migration.edit.xml&#10;new file mode 100644&#10;index 0000000..8648f94&#10;--- /dev/null&#10;+++ b/.idea/copilot.data.migration.edit.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;EditMigrationStateService&quot;&gt;&#10;+    &lt;option name=&quot;migrationStatus&quot; value=&quot;COMPLETED&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/copilotDiffState.xml b/.idea/copilotDiffState.xml&#10;new file mode 100644&#10;index 0000000..195b866&#10;--- /dev/null&#10;+++ b/.idea/copilotDiffState.xml&#10;@@ -0,0 +1,17 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;CopilotDiffPersistence&quot;&gt;&#10;+    &lt;option name=&quot;pendingDiffs&quot;&gt;&#10;+      &lt;map&gt;&#10;+        &lt;entry key=&quot;$PROJECT_DIR$/COMO_EXECUTAR.txt&quot;&gt;&#10;+          &lt;value&gt;&#10;+            &lt;PendingDiffInfo&gt;&#10;+              &lt;option name=&quot;filePath&quot; value=&quot;$PROJECT_DIR$/COMO_EXECUTAR.txt&quot; /&gt;&#10;+              &lt;option name=&quot;updatedContent&quot; value=&quot;===============================================&amp;#10;    GUIA COMPLETO DE EXECUÇÃO - SIMULADOR MULTITHREAD&amp;#10;===============================================&amp;#10;&amp;#10; COMO EXECUTAR O CÓDIGO:&amp;#10;&amp;#10;1. ABRIR TERMINAL na pasta do projeto:&amp;#10;   cd /home/pedro/IdeaProjects/PadroesDEProjeto&amp;#10;&amp;#10;2. COMPILAR (se necessário):&amp;#10;   javac -d bin src/view/*.java src/model/*.java src/controller/*.java&amp;#10;&amp;#10;3. EXECUTAR O SISTEMA MULTITHREAD:&amp;#10;   java -cp bin controller.Orquestradora&amp;#10;&amp;#10;4. EXECUTAR O SISTEMA ORIGINAL (opcional):&amp;#10;   java -cp bin controller.HidrometroController&amp;#10;&amp;#10;===============================================&amp;#10;    COMANDOS DO SISTEMA MULTITHREAD&amp;#10;===============================================&amp;#10;&amp;#10;Quando executar, você verá este menu:&amp;#10;&amp;#10;=== MENU DE COMANDOS ===&amp;#10;0 - Criar novo simulador&amp;#10;1 - Modificar largura do cano de entrada&amp;#10;2 - Modificar largura do cano de saída&amp;#10;3 - Modificar regulagem da torneira&amp;#10;4 - Modificar velocidade da água&amp;#10;5 - Ver medição do hidrômetro&amp;#10;6 - Listar simuladores ativos&amp;#10;7 - Parar simulador&amp;#10;9 - Sair&amp;#10;&amp;#10;===============================================&amp;#10;    EXEMPLO PRÁTICO DE USO&amp;#10;===============================================&amp;#10;&amp;#10; CRIAR SIMULADORES COM PERFIS DIFERENTES:&amp;#10;&amp;#10;Digite: 0&amp;#10;Escolha: 2 (arquivo específico)&amp;#10;→ Cria simulador 1 com configuracao1.txt (residencial baixo)&amp;#10;&amp;#10;Digite: 0&amp;#10;Escolha: 2 (arquivo específico)&amp;#10;→ Cria simulador 2 com configuracao2.txt (comercial médio)&amp;#10;&amp;#10;Digite: 0&amp;#10;Escolha: 2 (arquivo específico)&amp;#10;→ Cria simulador 3 com configuracao3.txt (industrial alto)&amp;#10;&amp;#10;Digite: 6&amp;#10;→ Lista todos os simuladores ativos&amp;#10;&amp;#10; PERFIS DISPONÍVEIS:&amp;#10;- configuracao1.txt: Residencial baixo (20mm, 45%, 0.25 m³/s)&amp;#10;- configuracao2.txt: Comercial médio (32mm, 70%, 0.55 m³/s)&amp;#10;- configuracao3.txt: Industrial alto (48mm, 88%, 0.95 m³/s)&amp;#10;- configuracao4.txt: Economia extrema (12mm, 18%, 0.08 m³/s)&amp;#10;- configuracao5.txt: Industrial máximo (55mm, 98%, 1.35 m³/s)&amp;#10;&amp;#10;===============================================&amp;#10;    SAÍDAS GERADAS&amp;#10;===============================================&amp;#10;&amp;#10;Cada simulador gera um arquivo independente:&amp;#10; saida/leitura_do_hidrometro_1.jpg&amp;#10; saida/leitura_do_hidrometro_2.jpg&amp;#10; saida/leitura_do_hidrometro_3.jpg&amp;#10; saida/leitura_do_hidrometro_4.jpg&amp;#10; saida/leitura_do_hidrometro_5.jpg&amp;#10;&amp;#10;===============================================&amp;#10;    COMANDOS RÁPIDOS PARA TESTE&amp;#10;===============================================&amp;#10;&amp;#10;Sequência para testar rapidamente:&amp;#10;&amp;#10;0 → 2  (cria simulador 1)&amp;#10;0 → 2  (cria simulador 2)&amp;#10;0 → 2  (cria simulador 3)&amp;#10;6      (lista simuladores)&amp;#10;[aguarda alguns segundos]&amp;#10;6      (lista novamente para ver diferenças)&amp;#10;9      (sair)&amp;#10;&amp;#10;===============================================&amp;#10;    DICAS IMPORTANTES&amp;#10;===============================================&amp;#10;&amp;#10;✅ Cada simulador roda em thread separada&amp;#10;✅ Volumes crescem em velocidades diferentes&amp;#10;✅ Modificações são em tempo real&amp;#10;✅ Arquivos de saída são independentes&amp;#10;✅ Sistema original mantido intacto&amp;#10;✅ Suporta até 5 simuladores simultâneos&amp;#10;&amp;#10;===============================================&quot; /&gt;&#10;+            &lt;/PendingDiffInfo&gt;&#10;+          &lt;/value&gt;&#10;+        &lt;/entry&gt;&#10;+      &lt;/map&gt;&#10;+    &lt;/option&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/misc.xml b/.idea/misc.xml&#10;new file mode 100644&#10;index 0000000..6f29fee&#10;--- /dev/null&#10;+++ b/.idea/misc.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_21&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;+    &lt;output url=&quot;file://$PROJECT_DIR$/out&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/modules.xml b/.idea/modules.xml&#10;new file mode 100644&#10;index 0000000..e630946&#10;--- /dev/null&#10;+++ b/.idea/modules.xml&#10;@@ -0,0 +1,8 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;ProjectModuleManager&quot;&gt;&#10;+    &lt;modules&gt;&#10;+      &lt;module fileurl=&quot;file://$PROJECT_DIR$/PadroesDEProjeto.iml&quot; filepath=&quot;$PROJECT_DIR$/PadroesDEProjeto.iml&quot; /&gt;&#10;+    &lt;/modules&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/.idea/vcs.xml b/.idea/vcs.xml&#10;new file mode 100644&#10;index 0000000..35eb1dd&#10;--- /dev/null&#10;+++ b/.idea/vcs.xml&#10;@@ -0,0 +1,6 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;project version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;VcsDirectoryMappings&quot;&gt;&#10;+    &lt;mapping directory=&quot;&quot; vcs=&quot;Git&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/project&gt;&#10;\ No newline at end of file&#10;diff --git a/PadroesDEProjeto.iml b/PadroesDEProjeto.iml&#10;new file mode 100644&#10;index 0000000..c90834f&#10;--- /dev/null&#10;+++ b/PadroesDEProjeto.iml&#10;@@ -0,0 +1,11 @@&#10;+&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;+&lt;module type=&quot;JAVA_MODULE&quot; version=&quot;4&quot;&gt;&#10;+  &lt;component name=&quot;NewModuleRootManager&quot; inherit-compiler-output=&quot;true&quot;&gt;&#10;+    &lt;exclude-output /&gt;&#10;+    &lt;content url=&quot;file://$MODULE_DIR$&quot;&gt;&#10;+      &lt;sourceFolder url=&quot;file://$MODULE_DIR$/src&quot; isTestSource=&quot;false&quot; /&gt;&#10;+    &lt;/content&gt;&#10;+    &lt;orderEntry type=&quot;inheritedJdk&quot; /&gt;&#10;+    &lt;orderEntry type=&quot;sourceFolder&quot; forTests=&quot;false&quot; /&gt;&#10;+  &lt;/component&gt;&#10;+&lt;/module&gt;&#10;\ No newline at end of file&#10;diff --git a/RELATORIO_IMPLEMENTACAO_MULTITHREAD.md b/RELATORIO_IMPLEMENTACAO_MULTITHREAD.md&#10;new file mode 100644&#10;index 0000000..1074e1d&#10;--- /dev/null&#10;+++ b/RELATORIO_IMPLEMENTACAO_MULTITHREAD.md&#10;@@ -0,0 +1,84 @@&#10;+===============================================================================&#10;+                    RELATÓRIO DE IMPLEMENTAÇÃO MULTITHREAD&#10;+                    SIMULADOR DE HIDRÔMETROS - PADRÕES DE PROJETO&#10;+===============================================================================&#10;+&#10;+Data: 30 de Setembro de 2025&#10;+Projeto: PadroesDEProjeto&#10;+Repositório: https://github.com/KATY-IFPB/PadroesDEProjeto&#10;+Branch Original: main&#10;+Branch de Desenvolvimento: dev_Pedro.Cordeiro&#10;+Colaborador: Pedro Cordeiro&#10;+&#10;+===============================================================================&#10;+                        RESUMO DAS ALTERAÇÕES PRINCIPAIS&#10;+===============================================================================&#10;+&#10;+Este relatório documenta as modificações realizadas para implementar suporte&#10;+multithread no simulador de hidrômetros, permitindo a execução de até 5 &#10;+simuladores concorrentes com comportamentos completamente independentes.&#10;+&#10;+## ALTERAÇÕES MAIS IMPORTANTES REALIZADAS:&#10;+&#10;+### 1. IMPLEMENTAÇÃO DE NOVA ARQUITETURA MULTITHREAD&#10;+   - Criação da classe Orquestradora.java como controlador principal multithread&#10;+   - Substituição de variáveis estáticas por ConcurrentHashMap para thread-safety&#10;+   - Implementação de AtomicInteger para controle seguro de IDs únicos&#10;+   - Gerenciamento independente de até 5 threads simultâneas&#10;+&#10;+### 2. EVOLUÇÃO DA CLASSE HIDROMETRO PARA THREAD-SAFETY&#10;+   - Adição de ID único para cada simulador (simuladorId)&#10;+   - Implementação de synchronização com 'synchronized' e 'volatile'&#10;+   - Criação de construtor com compatibilidade reversa&#10;+   - Adição de método parar() para encerramento controlado de threads&#10;+   - Modificação do método run() com tratamento adequado de InterruptedException&#10;+&#10;+### 3. EXTENSÃO DA CLASSE DISPLAY PARA SAÍDAS INDEPENDENTES&#10;+   - Suporte a múltiplos simuladores com IDs únicos&#10;+   - Geração de arquivos de saída separados (hidrometro_1.jpg, hidrometro_2.jpg, etc.)&#10;+   - Manutenção de compatibilidade com código original (construtor sem ID)&#10;+   - Implementação de criação automática do diretório de saída&#10;+&#10;+### 4. CRIAÇÃO DE SISTEMA DE CONFIGURAÇÕES FLEXÍVEL&#10;+   - Desenvolvimento de 5 arquivos de configuração específicos (configuracao1.txt - configuracao5.txt)&#10;+   - Perfis diferenciados: residencial baixo, comercial médio, industrial alto, economia extrema, industrial máximo&#10;+   - Sistema de carregamento híbrido (recursos + arquivos locais)&#10;+   - Opções de configuração: padrão, específica por ID, ou personalizada manual&#10;+&#10;+### 5. CORREÇÃO DE PROBLEMAS DO CÓDIGO ORIGINAL&#10;+   - Correção de erro de sintaxe &quot;ocpackage&quot; para &quot;package&quot; em HidrometroController.java&#10;+   - Manutenção total da compatibilidade com sistema original&#10;+   - Preservação de todas as funcionalidades existentes&#10;+&#10;+### 6. IMPLEMENTAÇÃO DE CONTROLES AVANÇADOS&#10;+   - Menu expandido com 9 comandos (vs 5 originais)&#10;+   - Listagem de simuladores ativos com status em tempo real&#10;+   - Modificação individual de parâmetros por simulador&#10;+   - Parada controlada de simuladores específicos&#10;+   - Encerramento seguro de todas as threads&#10;+&#10;+## IMPACTO DAS MODIFICAÇÕES:&#10;+&#10;+### FUNCIONALIDADES ADICIONADAS:&#10;+✓ Capacidade multithread para até 5 simuladores simultâneos&#10;+✓ Comportamentos de entrada, medição e saída completamente independentes&#10;+✓ Thread-safety em todas as operações críticas&#10;+✓ Sistema de configuração flexível e escalável&#10;+✓ Controle granular de cada instância de simulador&#10;+&#10;+### COMPATIBILIDADE PRESERVADA:&#10;+✓ Código original (HidrometroController) mantido funcional&#10;+✓ Todas as classes originais preservadas&#10;+✓ Mesmo comportamento para uso single-thread&#10;+✓ Arquivos de configuração original inalterados&#10;+&#10;+### MELHORIAS DE ARQUITETURA:&#10;+✓ Separação de responsabilidades (Orquestradora vs HidrometroController)&#10;+✓ Implementação de padrões de concorrência Java&#10;+✓ Tratamento adequado de recursos e memória&#10;+✓ Logging e feedback aprimorados para o usuário&#10;+&#10;+===============================================================================&#10;+                            DIFERENÇAS TÉCNICAS (GIT DIFF)&#10;+===============================================================================&#10;+&#10;diff --git a/bin/controller/HidrometroController.class b/bin/controller/HidrometroController.class&#10;index 13a613e..cfb5c24 100644&#10;Binary files a/bin/controller/HidrometroController.class and b/bin/controller/HidrometroController.class differ&#10;diff --git a/bin/controller/Orquestradora.class b/bin/controller/Orquestradora.class&#10;new file mode 100644&#10;index 0000000..716c7dd&#10;Binary files /dev/null and b/bin/controller/Orquestradora.class differ&#10;diff --git a/bin/model/Hidrometro.class b/bin/model/Hidrometro.class&#10;index 0e16db2..fbd931e 100644&#10;Binary files a/bin/model/Hidrometro.class and b/bin/model/Hidrometro.class differ&#10;diff --git a/bin/view/Display.class b/bin/view/Display.class&#10;index 936d560..e005b2f 100644&#10;Binary files a/bin/view/Display.class and b/bin/view/Display.class differ&#10;diff --git a/bin/view/Messages.class b/bin/view/Messages.class&#10;index 57151f2..c735a3f 100644&#10;Binary files a/bin/view/Messages.class and b/bin/view/Messages.class differ&#10;diff --git a/out/production/PadroesDEProjeto/configuracao.txt b/out/production/PadroesDEProjeto/configuracao.txt&#10;new file mode 100644&#10;index 0000000..dfe4282&#10;--- /dev/null&#10;+++ b/out/production/PadroesDEProjeto/configuracao.txt&#10;@@ -0,0 +1,12 @@&#10;+Largura do cano de entrada (em mm) &#10;+25&#10;+Largura do cano de saida (em mm) &#10;+25&#10;+Regulagem da torneira (0 a 100) &#10;+50&#10;+Velocidade da entrada de agua (em  m³/s) &#10;+0.3&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;\ No newline at end of file&#10;diff --git a/out/production/PadroesDEProjeto/controller/HidrometroController.class b/out/production/PadroesDEProjeto/controller/HidrometroController.class&#10;new file mode 100644&#10;index 0000000..cad9e95&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/controller/HidrometroController.class differ&#10;diff --git a/out/production/PadroesDEProjeto/model/Hidrometro.class b/out/production/PadroesDEProjeto/model/Hidrometro.class&#10;new file mode 100644&#10;index 0000000..e86b2f6&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/model/Hidrometro.class differ&#10;diff --git a/out/production/PadroesDEProjeto/module-info.class b/out/production/PadroesDEProjeto/module-info.class&#10;new file mode 100644&#10;index 0000000..3d511cc&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/module-info.class differ&#10;diff --git a/out/production/PadroesDEProjeto/view/Display.class b/out/production/PadroesDEProjeto/view/Display.class&#10;new file mode 100644&#10;index 0000000..3d0013c&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/view/Display.class differ&#10;diff --git a/out/production/PadroesDEProjeto/view/Messages.class b/out/production/PadroesDEProjeto/view/Messages.class&#10;new file mode 100644&#10;index 0000000..f957a52&#10;Binary files /dev/null and b/out/production/PadroesDEProjeto/view/Messages.class differ&#10;diff --git a/out/production/PadroesDEProjeto/view/messages.properties b/out/production/PadroesDEProjeto/view/messages.properties&#10;new file mode 100644&#10;index 0000000..2c5b75c&#10;--- /dev/null&#10;+++ b/out/production/PadroesDEProjeto/view/messages.properties&#10;@@ -0,0 +1,20 @@&#10;+HidrometroController.0=Arquivo configuracao.txt n�o encontrado\!&#10;+HidrometroController.1=Hidrometro Inicializado&#10;+HidrometroController.10=Sistema nao Inicializado&#10;+HidrometroController.11=Digite o novo valor&#10;+HidrometroController.12=Valor atualizado com sucesso\!&#10;+HidrometroController.13=Sistema nao Inicializado&#10;+HidrometroController.14=Valor lido:&#10;+HidrometroController.15=Sistema nao Inicializado&#10;+HidrometroController.16=Comando invalido&#10;+HidrometroController.2=Digite o novo valor&#10;+HidrometroController.3=Valor atualizado com sucesso\!&#10;+HidrometroController.4=Sistema nao Inicializado&#10;+HidrometroController.5=Digite o novo valor&#10;+HidrometroController.6=Valor atualizado com sucesso\!&#10;+HidrometroController.7=Sistema nao Inicializado&#10;+HidrometroController.8=Digite o novo valor&#10;+HidrometroController.9=Valor atualizado com sucesso\!&#10;+HidrometroController.17=Lista de Comandos do Sistema \n\n Digite 0 - Para inicializar o Sistema com o arquivo de configura��o \n Digite 1 - Para modificar a largura do cano que entra no hidrometro \n Digite 2 - Para modificar a largura do cano que sai no hidrometro \n Digite 3 - Para regular a torneira de entrada de agua do hidrometro \n Digite 4 - Para modificar a velocidade da agua em metros� \n Digite 5 - Para vizualizar o volume de agua medido pelo hidrometro \n\n&#10;+HidrometroController.18=/configuracao.txt&#10;+HidrometroController.19=Sistema j� foi inicializado&#10;\ No newline at end of file&#10;diff --git a/relatorio_diferencas.txt b/relatorio_diferencas.txt&#10;new file mode 100644&#10;index 0000000..e69de29&#10;diff --git a/saida/leitura_do_hidrometro.jpg b/saida/leitura_do_hidrometro.jpg&#10;index 3c4bacf..ca02160 100644&#10;Binary files a/saida/leitura_do_hidrometro.jpg and b/saida/leitura_do_hidrometro.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_2.jpg b/saida/leitura_do_hidrometro_2.jpg&#10;new file mode 100644&#10;index 0000000..1ea9746&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_2.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_3.jpg b/saida/leitura_do_hidrometro_3.jpg&#10;new file mode 100644&#10;index 0000000..5e0aedb&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_3.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_4.jpg b/saida/leitura_do_hidrometro_4.jpg&#10;new file mode 100644&#10;index 0000000..8b05bda&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_4.jpg differ&#10;diff --git a/saida/leitura_do_hidrometro_5.jpg b/saida/leitura_do_hidrometro_5.jpg&#10;new file mode 100644&#10;index 0000000..c55338d&#10;Binary files /dev/null and b/saida/leitura_do_hidrometro_5.jpg differ&#10;diff --git a/src/configuracao1.txt b/src/configuracao1.txt&#10;new file mode 100644&#10;index 0000000..a6f75e0&#10;--- /dev/null&#10;+++ b/src/configuracao1.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+20&#10;+Largura do cano de saida (em mm)&#10;+22&#10;+Regulagem da torneira (0 a 100)&#10;+45&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.25&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao2.txt b/src/configuracao2.txt&#10;new file mode 100644&#10;index 0000000..6396d7f&#10;--- /dev/null&#10;+++ b/src/configuracao2.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+32&#10;+Largura do cano de saida (em mm)&#10;+28&#10;+Regulagem da torneira (0 a 100)&#10;+70&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.55&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao3.txt b/src/configuracao3.txt&#10;new file mode 100644&#10;index 0000000..c0f5807&#10;--- /dev/null&#10;+++ b/src/configuracao3.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+48&#10;+Largura do cano de saida (em mm)&#10;+42&#10;+Regulagem da torneira (0 a 100)&#10;+88&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.95&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao4.txt b/src/configuracao4.txt&#10;new file mode 100644&#10;index 0000000..063f298&#10;--- /dev/null&#10;+++ b/src/configuracao4.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+12&#10;+Largura do cano de saida (em mm)&#10;+15&#10;+Regulagem da torneira (0 a 100)&#10;+18&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+0.08&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/configuracao5.txt b/src/configuracao5.txt&#10;new file mode 100644&#10;index 0000000..df72393&#10;--- /dev/null&#10;+++ b/src/configuracao5.txt&#10;@@ -0,0 +1,13 @@&#10;+Largura do cano de entrada (em mm)&#10;+55&#10;+Largura do cano de saida (em mm)&#10;+50&#10;+Regulagem da torneira (0 a 100)&#10;+98&#10;+Velocidade da entrada de agua (em  m³/s)&#10;+1.35&#10;+Endereço da imagem do hidrometro sem edição&#10;+/resources/hidrometro.jpg&#10;+Endereço da leitura do hidrometro&#10;+/resources/saida/hidrometro.jpg&#10;+&#10;diff --git a/src/controller/HidrometroController.java b/src/controller/HidrometroController.java&#10;index cf39929..38997e8 100644&#10;--- a/src/controller/HidrometroController.java&#10;+++ b/src/controller/HidrometroController.java&#10;@@ -8,11 +8,11 @@ import view.Messages;&#10; &#10; /**&#10;  * Controlador principal do Hidrometro.&#10;- * &#10;+ *&#10;  * Esta classe gerencia a inicialização e o controle de um objeto Hidrometro,&#10;  * fornecendo um menu interativo via console para manipular atributos do hidrometro&#10;  * como largura do cano, regulagem da torneira, velocidade da água e visualização da medição.&#10;- * &#10;+ *&#10;  * Utiliza a classe {@link Hidrometro} do pacote model para representar o hidrometro real.&#10;  */&#10; public class HidrometroController {&#10;@@ -36,10 +36,10 @@ public class HidrometroController {&#10; &#10; &#9;/**&#10; &#9; * Método principal que inicia a aplicação.&#10;-&#9; * &#10;+&#9; *&#10; &#9; * Cria um menu de interação via console para manipular o hidrometro.&#10; &#9; * Recebe entradas do usuário e executa os comandos correspondentes.&#10;-&#9; * &#10;+&#9; *&#10; &#9; * Comandos disponíveis:&#10; &#9; * &lt;ul&gt;&#10; &#9; *   &lt;li&gt;0 - Inicializar hidrometro&lt;/li&gt;&#10;@@ -49,7 +49,7 @@ public class HidrometroController {&#10; &#9; *   &lt;li&gt;4 - Definir velocidade da água&lt;/li&gt;&#10; &#9; *   &lt;li&gt;5 - Ver medição atual do hidrometro&lt;/li&gt;&#10; &#9; * &lt;/ul&gt;&#10;-&#9; * &#10;+&#9; *&#10; &#9; * @param args argumentos da linha de comando (não utilizados)&#10; &#9; */&#10; &#9;public static void main(String[] args) {&#10;diff --git a/src/controller/Orquestradora.java b/src/controller/Orquestradora.java&#10;new file mode 100644&#10;index 0000000..468763d&#10;--- /dev/null&#10;+++ b/src/controller/Orquestradora.java&#10;@@ -0,0 +1,394 @@&#10;+package controller;&#10;+&#10;+import java.io.InputStream;&#10;+import java.util.Map;&#10;+import java.util.Scanner;&#10;+import java.util.concurrent.ConcurrentHashMap;&#10;+import java.util.concurrent.atomic.AtomicInteger;&#10;+&#10;+import model.Hidrometro;&#10;+import view.Messages;&#10;+&#10;+/**&#10;+ * Orquestradora multithread para gerenciar até 5 simuladores de hidrômetro concorrentes.&#10;+ *&#10;+ * Esta classe mantém o código original &quot;puro&quot; e adiciona capacidade multithread,&#10;+ * permitindo que múltiplos simuladores executem independentemente com comportamentos&#10;+ * de entrada, medição e saída completamente diferentes.&#10;+ */&#10;+public class Orquestradora {&#10;+&#10;+    /** Número máximo de simuladores concorrentes */&#10;+    private static final int MAX_SIMULADORES = 5;&#10;+&#10;+    /** Mapa thread-safe para armazenar os simuladores ativos */&#10;+    private static final Map&lt;Integer, Hidrometro&gt; simuladores = new ConcurrentHashMap&lt;&gt;();&#10;+&#10;+    /** Mapa para armazenar as threads dos simuladores */&#10;+    private static final Map&lt;Integer, Thread&gt; threads = new ConcurrentHashMap&lt;&gt;();&#10;+&#10;+    /** Contador para IDs únicos dos simuladores */&#10;+    private static final AtomicInteger contadorId = new AtomicInteger(1);&#10;+&#10;+    // Constantes de comando do menu (expandido para multithread)&#10;+    private static final int CRIAR_SIMULADOR = 0;&#10;+    private static final int SET_LARGURA_CANO_ENTRADA = 1;&#10;+    private static final int SET_LARGURA_CANO_SAIDA = 2;&#10;+    private static final int SET_REGULAGEM_DA_TORNEIRA = 3;&#10;+    private static final int SET_VELOCIDADE_DA_AGUA = 4;&#10;+    private static final int VER_MEDICAO_DO_HIDROMETRO = 5;&#10;+    private static final int LISTAR_SIMULADORES = 6;&#10;+    private static final int PARAR_SIMULADOR = 7;&#10;+    private static final int SAIR = 9;&#10;+&#10;+    /**&#10;+     * Método principal que inicia a aplicação multithread.&#10;+     */&#10;+    public static void main(String[] args) {&#10;+        System.out.println(&quot;=== SIMULADOR MULTITHREAD DE HIDRÔMETROS ===&quot;);&#10;+        System.out.println(&quot;Capacidade: até &quot; + MAX_SIMULADORES + &quot; simuladores concorrentes&quot;);&#10;+        exibirMenu();&#10;+&#10;+        Scanner sc = new Scanner(System.in);&#10;+&#10;+        while (sc.hasNext()) {&#10;+            int comando = sc.nextInt();&#10;+&#10;+            switch (comando) {&#10;+                case CRIAR_SIMULADOR:&#10;+                    criarSimulador(sc);&#10;+                    break;&#10;+&#10;+                case SET_LARGURA_CANO_ENTRADA:&#10;+                    modificarLarguraCanoEntrada(sc);&#10;+                    break;&#10;+&#10;+                case SET_LARGURA_CANO_SAIDA:&#10;+                    modificarLarguraCanoSaida(sc);&#10;+                    break;&#10;+&#10;+                case SET_REGULAGEM_DA_TORNEIRA:&#10;+                    modificarRegulagemTorneira(sc);&#10;+                    break;&#10;+&#10;+                case SET_VELOCIDADE_DA_AGUA:&#10;+                    modificarVelocidadeAgua(sc);&#10;+                    break;&#10;+&#10;+                case VER_MEDICAO_DO_HIDROMETRO:&#10;+                    verMedicao(sc);&#10;+                    break;&#10;+&#10;+                case LISTAR_SIMULADORES:&#10;+                    listarSimuladores();&#10;+                    break;&#10;+&#10;+                case PARAR_SIMULADOR:&#10;+                    pararSimulador(sc);&#10;+                    break;&#10;+&#10;+                case SAIR:&#10;+                    encerrarTodos();&#10;+                    System.out.println(&quot;Sistema encerrado.&quot;);&#10;+                    return;&#10;+&#10;+                default:&#10;+                    System.out.println(&quot;Comando inválido!&quot;);&#10;+                    break;&#10;+            }&#10;+&#10;+            exibirMenu();&#10;+        }&#10;+&#10;+        sc.close();&#10;+    }&#10;+&#10;+    /**&#10;+     * Exibe o menu de comandos disponíveis.&#10;+     */&#10;+    private static void exibirMenu() {&#10;+        System.out.println(&quot;\n=== MENU DE COMANDOS ===&quot;);&#10;+        System.out.println(&quot;0 - Criar novo simulador&quot;);&#10;+        System.out.println(&quot;1 - Modificar largura do cano de entrada&quot;);&#10;+        System.out.println(&quot;2 - Modificar largura do cano de saída&quot;);&#10;+        System.out.println(&quot;3 - Modificar regulagem da torneira&quot;);&#10;+        System.out.println(&quot;4 - Modificar velocidade da água&quot;);&#10;+        System.out.println(&quot;5 - Ver medição do hidrômetro&quot;);&#10;+        System.out.println(&quot;6 - Listar simuladores ativos&quot;);&#10;+        System.out.println(&quot;7 - Parar simulador&quot;);&#10;+        System.out.println(&quot;9 - Sair&quot;);&#10;+        System.out.print(&quot;Digite o comando: &quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria um novo simulador com configurações do arquivo ou personalizadas.&#10;+     */&#10;+    private static void criarSimulador(Scanner sc) {&#10;+        if (simuladores.size() &gt;= MAX_SIMULADORES) {&#10;+            System.out.println(&quot;Limite máximo de simuladores atingido (&quot; + MAX_SIMULADORES + &quot;).&quot;);&#10;+            return;&#10;+        }&#10;+&#10;+        int id = contadorId.getAndIncrement();&#10;+        if (id &gt; MAX_SIMULADORES) {&#10;+            contadorId.decrementAndGet();&#10;+            System.out.println(&quot;Todos os IDs de simuladores foram utilizados.&quot;);&#10;+            return;&#10;+        }&#10;+&#10;+        System.out.println(&quot;Escolha o tipo de configuração:&quot;);&#10;+        System.out.println(&quot;1 - Usar arquivo de configuração padrão (configuracao.txt)&quot;);&#10;+        System.out.println(&quot;2 - Usar arquivo específico (configuracao&quot; + id + &quot;.txt)&quot;);&#10;+        System.out.println(&quot;3 - Configuração personalizada&quot;);&#10;+        System.out.print(&quot;Opção: &quot;);&#10;+&#10;+        int opcao = sc.nextInt();&#10;+&#10;+        try {&#10;+            Hidrometro hidrometro;&#10;+&#10;+            if (opcao == 1) {&#10;+                hidrometro = criarSimuladorPadrao(id);&#10;+            } else if (opcao == 2) {&#10;+                hidrometro = criarSimuladorEspecifico(id);&#10;+            } else {&#10;+                hidrometro = criarSimuladorPersonalizado(sc, id);&#10;+            }&#10;+&#10;+            Thread thread = new Thread(hidrometro, &quot;Hidrometro-&quot; + id);&#10;+            thread.start();&#10;+&#10;+            simuladores.put(id, hidrometro);&#10;+            threads.put(id, thread);&#10;+&#10;+            System.out.println(&quot;Simulador &quot; + id + &quot; criado e iniciado com sucesso!&quot;);&#10;+            if (opcao == 2) {&#10;+                System.out.println(&quot;Usando configurações do arquivo: configuracao&quot; + id + &quot;.txt&quot;);&#10;+            }&#10;+            System.out.println(&quot;Arquivo de saída: saida/leitura_do_hidrometro_&quot; + id + &quot;.jpg&quot;);&#10;+&#10;+        } catch (Exception e) {&#10;+            System.out.println(&quot;Erro ao criar simulador: &quot; + e.getMessage());&#10;+            contadorId.decrementAndGet(); // Reverte o contador em caso de erro&#10;+        }&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria simulador com configurações do arquivo padrão.&#10;+     */&#10;+    private static Hidrometro criarSimuladorPadrao(int id) throws Exception {&#10;+        return carregarConfiguracaoDeArquivo(id, &quot;/configuracao.txt&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria simulador com configurações de arquivo específico.&#10;+     */&#10;+    private static Hidrometro criarSimuladorEspecifico(int id) throws Exception {&#10;+        return carregarConfiguracaoDeArquivo(id, &quot;/configuracao&quot; + id + &quot;.txt&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Carrega configuração de um arquivo específico.&#10;+     */&#10;+    private static Hidrometro carregarConfiguracaoDeArquivo(int id, String nomeArquivo) throws Exception {&#10;+        // Tenta carregar como recurso primeiro, depois como arquivo local&#10;+        InputStream inputStream = Orquestradora.class.getResourceAsStream(nomeArquivo);&#10;+&#10;+        if (inputStream == null) {&#10;+            // Se não encontrar como recurso, tenta carregar do diretório src/&#10;+            String caminhoLocal = &quot;src&quot; + nomeArquivo;&#10;+            try {&#10;+                inputStream = new java.io.FileInputStream(caminhoLocal);&#10;+            } catch (java.io.FileNotFoundException e) {&#10;+                throw new Exception(&quot;Arquivo de configuração não encontrado: &quot; + nomeArquivo + &quot; nem em &quot; + caminhoLocal);&#10;+            }&#10;+        }&#10;+&#10;+        try (Scanner scanner = new Scanner(inputStream)) {&#10;+            scanner.nextLine(); // Pula descrição&#10;+            double larguraCanoEntrada = Double.parseDouble(scanner.nextLine());&#10;+            scanner.nextLine(); // Pula descrição&#10;+            double larguraCanoSaida = Double.parseDouble(scanner.nextLine());&#10;+            scanner.nextLine(); // Pula descrição&#10;+            int regulagemDaTorneira = Integer.parseInt(scanner.nextLine());&#10;+            scanner.nextLine(); // Pula descrição&#10;+            double velocidadeDaAgua = Double.parseDouble(scanner.nextLine());&#10;+&#10;+            System.out.println(&quot;Configuração carregada do arquivo &quot; + nomeArquivo + &quot;:&quot;);&#10;+            System.out.println(&quot;- Largura entrada: &quot; + larguraCanoEntrada + &quot; mm&quot;);&#10;+            System.out.println(&quot;- Largura saída: &quot; + larguraCanoSaida + &quot; mm&quot;);&#10;+            System.out.println(&quot;- Regulagem torneira: &quot; + regulagemDaTorneira + &quot;%&quot;);&#10;+            System.out.println(&quot;- Velocidade água: &quot; + velocidadeDaAgua + &quot; m³/s&quot;);&#10;+&#10;+            return new Hidrometro(id, regulagemDaTorneira, larguraCanoEntrada,&#10;+                                larguraCanoSaida, velocidadeDaAgua);&#10;+        }&#10;+    }&#10;+&#10;+    /**&#10;+     * Cria simulador com configurações personalizadas.&#10;+     */&#10;+    private static Hidrometro criarSimuladorPersonalizado(Scanner sc, int id) {&#10;+        System.out.print(&quot;Largura do cano de entrada (mm): &quot;);&#10;+        double larguraCanoEntrada = sc.nextDouble();&#10;+&#10;+        System.out.print(&quot;Largura do cano de saída (mm): &quot;);&#10;+        double larguraCanoSaida = sc.nextDouble();&#10;+&#10;+        System.out.print(&quot;Regulagem da torneira (0-100): &quot;);&#10;+        int regulagemDaTorneira = sc.nextInt();&#10;+&#10;+        System.out.print(&quot;Velocidade da água (m³/s): &quot;);&#10;+        double velocidadeDaAgua = sc.nextDouble();&#10;+&#10;+        return new Hidrometro(id, regulagemDaTorneira, larguraCanoEntrada,&#10;+                            larguraCanoSaida, velocidadeDaAgua);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a largura do cano de entrada de um simulador específico.&#10;+     */&#10;+    private static void modificarLarguraCanoEntrada(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova largura do cano de entrada (mm): &quot;);&#10;+        double novoValor = sc.nextDouble();&#10;+&#10;+        hidrometro.setLarguraCanoEntrada(novoValor);&#10;+        System.out.println(&quot;Largura do cano de entrada do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a largura do cano de saída de um simulador específico.&#10;+     */&#10;+    private static void modificarLarguraCanoSaida(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova largura do cano de saída (mm): &quot;);&#10;+        double novoValor = sc.nextDouble();&#10;+&#10;+        hidrometro.setLarguraCanoSaida(novoValor);&#10;+        System.out.println(&quot;Largura do cano de saída do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a regulagem da torneira de um simulador específico.&#10;+     */&#10;+    private static void modificarRegulagemTorneira(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova regulagem da torneira (0-100): &quot;);&#10;+        int novoValor = sc.nextInt();&#10;+&#10;+        hidrometro.setTorneiraRegulagem(novoValor);&#10;+        System.out.println(&quot;Regulagem da torneira do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Modifica a velocidade da água de um simulador específico.&#10;+     */&#10;+    private static void modificarVelocidadeAgua(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        System.out.print(&quot;Nova velocidade da água (m³/s): &quot;);&#10;+        double novoValor = sc.nextDouble();&#10;+&#10;+        hidrometro.setVelocidadeAguaEntrada(novoValor);&#10;+        System.out.println(&quot;Velocidade da água do simulador &quot; + id + &quot; atualizada!&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Exibe a medição atual de um simulador específico.&#10;+     */&#10;+    private static void verMedicao(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        int volume = (int) hidrometro.getVolumeAcumulado();&#10;+        System.out.println(&quot;Simulador &quot; + id + &quot; - Volume medido: &quot; + volume + &quot; m³&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Lista todos os simuladores ativos.&#10;+     */&#10;+    private static void listarSimuladores() {&#10;+        if (simuladores.isEmpty()) {&#10;+            System.out.println(&quot;Nenhum simulador ativo.&quot;);&#10;+            return;&#10;+        }&#10;+&#10;+        System.out.println(&quot;\n=== SIMULADORES ATIVOS ===&quot;);&#10;+        simuladores.forEach((id, hidrometro) -&gt; {&#10;+            System.out.printf(&quot;ID: %d | Volume: %d m³ | Regulagem: %d%% | Status: %s%n&quot;,&#10;+                id,&#10;+                (int) hidrometro.getVolumeAcumulado(),&#10;+                hidrometro.getTorneiraRegulagem(),&#10;+                threads.get(id).isAlive() ? &quot;Ativo&quot; : &quot;Parado&quot;&#10;+            );&#10;+        });&#10;+    }&#10;+&#10;+    /**&#10;+     * Para um simulador específico.&#10;+     */&#10;+    private static void pararSimulador(Scanner sc) {&#10;+        int id = selecionarSimulador(sc);&#10;+        if (id == -1) return;&#10;+&#10;+        Hidrometro hidrometro = simuladores.get(id);&#10;+        Thread thread = threads.get(id);&#10;+&#10;+        hidrometro.parar();&#10;+        thread.interrupt();&#10;+&#10;+        simuladores.remove(id);&#10;+        threads.remove(id);&#10;+&#10;+        System.out.println(&quot;Simulador &quot; + id + &quot; parado e removido.&quot;);&#10;+    }&#10;+&#10;+    /**&#10;+     * Seleciona um simulador ativo pelo ID.&#10;+     */&#10;+    private static int selecionarSimulador(Scanner sc) {&#10;+        if (simuladores.isEmpty()) {&#10;+            System.out.println(&quot;Nenhum simulador ativo.&quot;);&#10;+            return -1;&#10;+        }&#10;+&#10;+        listarSimuladores();&#10;+        System.out.print(&quot;Digite o ID do simulador: &quot;);&#10;+        int id = sc.nextInt();&#10;+&#10;+        if (!simuladores.containsKey(id)) {&#10;+            System.out.println(&quot;Simulador com ID &quot; + id + &quot; não encontrado.&quot;);&#10;+            return -1;&#10;+        }&#10;+&#10;+        return id;&#10;+    }&#10;+&#10;+    /**&#10;+     * Encerra todos os simuladores ativos.&#10;+     */&#10;+    private static void encerrarTodos() {&#10;+        System.out.println(&quot;Encerrando todos os simuladores...&quot;);&#10;+&#10;+        simuladores.values().forEach(Hidrometro::parar);&#10;+        threads.values().forEach(Thread::interrupt);&#10;+&#10;+        simuladores.clear();&#10;+        threads.clear();&#10;+&#10;+        System.out.println(&quot;Todos os simuladores foram encerrados.&quot;);&#10;+    }&#10;+}&#10;diff --git a/src/model/Hidrometro.java b/src/model/Hidrometro.java&#10;index cb29997..e53fa31 100644&#10;--- a/src/model/Hidrometro.java&#10;+++ b/src/model/Hidrometro.java&#10;@@ -5,52 +5,67 @@ import view.Display;&#10; /**&#10;  * Representa um Hidrometro que monitora e registra o volume de água&#10;  * que passa por um sistema hidráulico.&#10;- * &#10;+ *&#10;  * A classe implementa {@link Runnable}, permitindo que seja executada&#10;  * em uma thread separada para atualizar continuamente o volume acumulado.&#10;  */&#10; public class Hidrometro implements Runnable {&#10; &#10;+    /** ID único do simulador (1-5) */&#10;+    private final int simuladorId;&#10;+&#10;     /** Volume máximo que o hidrometro pode registrar antes de zerar (em m³) */&#10;     private double volumeMaximo = 99999999;&#10; &#10;     /** Volume total acumulado registrado pelo hidrometro (em m³) */&#10;-    private double volumeAcumulado;&#10;+    private volatile double volumeAcumulado;&#10; &#10;     /** Largura do cano de entrada (em metros) */&#10;-    private double larguraCanoEntrada;&#10;+    private volatile double larguraCanoEntrada;&#10; &#10;     /** Largura do cano de saída (em metros) */&#10;-    private double larguraCanoSaida;&#10;+    private volatile double larguraCanoSaida;&#10; &#10;     /** Regulação da torneira em percentual (0 a 100) */&#10;-    private int torneiraRegulagem;&#10;+    private volatile int torneiraRegulagem;&#10; &#10;     /** Velocidade da água na entrada (em m/s) */&#10;-    private double velocidadeAguaEntrada;&#10;+    private volatile double velocidadeAguaEntrada;&#10;+&#10;+    private Display display; // Para exibição visual&#10;+&#10;+    /** Flag para controlar execução da thread */&#10;+    private volatile boolean executando = true;&#10; &#10;-     private Display display; // Futuro uso para exibição visual&#10;+    /**&#10;+     * Construtor original do Hidrometro (compatibilidade).&#10;+     */&#10;+    public Hidrometro(int torneiraRegulagem, double larguraCanoEntrada, double larguraCanoSaida, double velocidadeAguaEntrada) {&#10;+        this(1, torneiraRegulagem, larguraCanoEntrada, larguraCanoSaida, velocidadeAguaEntrada);&#10;+    }&#10; &#10;     /**&#10;-     * Construtor do Hidrometro.&#10;+     * Construtor do Hidrometro com ID de simulador.&#10;      *&#10;+     * @param simuladorId ID único do simulador (1-5)&#10;      * @param torneiraRegulagem percentual de abertura da torneira&#10;      * @param larguraCanoEntrada largura do cano de entrada (m)&#10;      * @param larguraCanoSaida largura do cano de saída (m)&#10;      * @param velocidadeAguaEntrada velocidade da água na entrada (m/s)&#10;      */&#10;-    public Hidrometro(int torneiraRegulagem, double larguraCanoEntrada, double larguraCanoSaida, double velocidadeAguaEntrada) {&#10;+    public Hidrometro(int simuladorId, int torneiraRegulagem, double larguraCanoEntrada, double larguraCanoSaida, double velocidadeAguaEntrada) {&#10;+        this.simuladorId = simuladorId;&#10;         this.volumeAcumulado = 0.0;&#10;         this.larguraCanoEntrada = larguraCanoEntrada;&#10;         this.larguraCanoSaida = larguraCanoSaida;&#10;         this.torneiraRegulagem = torneiraRegulagem;&#10;         this.velocidadeAguaEntrada = velocidadeAguaEntrada;&#10;-        display = new Display((int)volumeAcumulado);&#10;+        display = new Display((int)volumeAcumulado, simuladorId);&#10;     }&#10; &#10;     /**&#10;      * Calcula a área da seção transversal do cano de entrada.&#10;-     * &#10;+     *&#10;      * @return área em m²&#10;      */&#10;     private double calcularArea() {&#10;@@ -59,9 +74,9 @@ public class Hidrometro implements Runnable {&#10; &#10;     /**&#10;      * Calcula a vazão instantânea de água no hidrometro.&#10;-     * &#10;+     *&#10;      * Considera a área do cano, a velocidade da água e a regulagem da torneira.&#10;-     * &#10;+     *&#10;      * @return vazão em m³/s&#10;      */&#10;     private double calcularVazao() {&#10;@@ -71,10 +86,10 @@ public class Hidrometro implements Runnable {&#10; &#10;     /**&#10;      * Atualiza o volume acumulado de água após um intervalo de tempo.&#10;-     * &#10;+     *&#10;      * @param tempoSegundos tempo decorrido em segundos&#10;      */&#10;-    public void registrarConsumo(double tempoSegundos) {&#10;+    public synchronized void registrarConsumo(double tempoSegundos) {&#10;         double vazao = calcularVazao(); // m³/s&#10;         double volume = vazao * tempoSegundos; // m³&#10;         this.volumeAcumulado += volume;&#10;@@ -87,75 +102,83 @@ public class Hidrometro implements Runnable {&#10;         display.gerarImagem();&#10;     }&#10; &#10;-    // ================= Getters e Setters =================&#10;+    // ================= Getters e Setters (thread-safe) =================&#10; &#10;-    public double getVolumeMaximo() {&#10;+    public synchronized double getVolumeMaximo() {&#10;         return volumeMaximo;&#10;     }&#10; &#10;-    public void setVolumeMaximo(double volumeMaximo) {&#10;+    public synchronized void setVolumeMaximo(double volumeMaximo) {&#10;         this.volumeMaximo = volumeMaximo;&#10;     }&#10; &#10;-    public double getVolumeAcumulado() {&#10;+    public synchronized double getVolumeAcumulado() {&#10;         return volumeAcumulado;&#10;     }&#10; &#10;-    public void setVolumeAcumulado(double volumeAcumulado) {&#10;+    public synchronized void setVolumeAcumulado(double volumeAcumulado) {&#10;         this.volumeAcumulado = volumeAcumulado;&#10;     }&#10; &#10;-    public double getLarguraCanoEntrada() {&#10;+    public synchronized double getLarguraCanoEntrada() {&#10;         return larguraCanoEntrada;&#10;     }&#10; &#10;-    public void setLarguraCanoEntrada(double larguraCanoEntrada) {&#10;+    public synchronized void setLarguraCanoEntrada(double larguraCanoEntrada) {&#10;         this.larguraCanoEntrada = larguraCanoEntrada;&#10;     }&#10; &#10;-    public double getLarguraCanoSaida() {&#10;+    public synchronized double getLarguraCanoSaida() {&#10;         return larguraCanoSaida;&#10;     }&#10; &#10;-    public void setLarguraCanoSaida(double larguraCanoSaida) {&#10;+    public synchronized void setLarguraCanoSaida(double larguraCanoSaida) {&#10;         this.larguraCanoSaida = larguraCanoSaida;&#10;     }&#10; &#10;-    public int getTorneiraRegulagem() {&#10;+    public synchronized int getTorneiraRegulagem() {&#10;         return torneiraRegulagem;&#10;     }&#10; &#10;-    public void setTorneiraRegulagem(int torneiraRegulagem) {&#10;+    public synchronized void setTorneiraRegulagem(int torneiraRegulagem) {&#10;         this.torneiraRegulagem = torneiraRegulagem;&#10;     }&#10; &#10;-    public double getVelocidadeAguaEntrada() {&#10;+    public synchronized double getVelocidadeAguaEntrada() {&#10;         return velocidadeAguaEntrada;&#10;     }&#10; &#10;-    public void setVelocidadeAguaEntrada(double velocidadeAguaEntrada) {&#10;+    public synchronized void setVelocidadeAguaEntrada(double velocidadeAguaEntrada) {&#10;         this.velocidadeAguaEntrada = velocidadeAguaEntrada;&#10;     }&#10; &#10;+    public int getSimuladorId() {&#10;+        return simuladorId;&#10;+    }&#10;+&#10;+    public void parar() {&#10;+        executando = false;&#10;+    }&#10;+&#10;     // ================= Runnable =================&#10; &#10;     /**&#10;      * Executa o hidrometro em uma thread separada.&#10;-     * &#10;+     *&#10;      * Atualiza o volume acumulado a cada segundo de forma contínua.&#10;      */&#10;     @Override&#10;     public void run() {&#10;-        while (true) {&#10;+        while (executando) {&#10;             registrarConsumo(1.0); // atualiza a cada segundo&#10; &#10;             try {&#10;                 Thread.sleep(1000); // pausa de 1 segundo&#10;             } catch (InterruptedException e) {&#10;-                e.printStackTrace();&#10;+                executando = false;&#10;+                Thread.currentThread().interrupt();&#10;+                break;&#10;             }&#10;-&#10;         }&#10;     }&#10;-&#10; }&#10;diff --git a/src/view/Display.java b/src/view/Display.java&#10;index 2360c1d..24b1f54 100644&#10;--- a/src/view/Display.java&#10;+++ b/src/view/Display.java&#10;@@ -22,14 +22,28 @@ public class Display {&#10; &#9;/** Valor que será exibido no display (leitura do hidrômetro). */&#10; &#9;private int numeroDisplay;&#10; &#10;+&#9;/** ID do simulador para gerar arquivos de saída únicos */&#10;+&#9;private int simuladorId;&#10;+&#10; &#9;/**&#10; &#9; * Construtor da classe Display.&#10; &#9; *&#10; &#9; * @param numeroDisplay valor inicial a ser exibido no display&#10; &#9; */&#10; &#9;public Display(int numeroDisplay) {&#10;+&#9;&#9;this(numeroDisplay, 1); // Compatibilidade com código original&#10;+&#9;}&#10;+&#10;+&#9;/**&#10;+&#9; * Construtor da classe Display com ID do simulador.&#10;+&#9; *&#10;+&#9; * @param numeroDisplay valor inicial a ser exibido no display&#10;+&#9; * @param simuladorId ID do simulador (1-5)&#10;+&#9; */&#10;+&#9;public Display(int numeroDisplay, int simuladorId) {&#10; &#9;&#9;super();&#10; &#9;&#9;this.numeroDisplay = numeroDisplay;&#10;+&#9;&#9;this.simuladorId = simuladorId;&#10; &#9;}&#10; &#9;&#10; &#9;/**&#10;@@ -61,7 +75,7 @@ public class Display {&#10; &#9; *   &lt;li&gt;Formata o número do display para 8 dígitos, adicionando zeros à esquerda.&lt;/li&gt;&#10; &#9; *   &lt;li&gt;Insere espaços entre os dígitos para simular melhor a leitura.&lt;/li&gt;&#10; &#9; *   &lt;li&gt;Desenha o texto na posição (290, 180) da imagem.&lt;/li&gt;&#10;-&#9; *   &lt;li&gt;Salva o resultado em &quot;saida/leitura_do_hidrometro.jpg&quot;.&lt;/li&gt;&#10;+&#9; *   &lt;li&gt;Salva o resultado em &quot;saida/leitura_do_hidrometro_[id].jpg&quot;.&lt;/li&gt;&#10; &#9; * &lt;/ol&gt;&#10; &#9; *&#10; &#9; * Em caso de erro, a exceção será exibida no console.&#10;@@ -88,8 +102,11 @@ public class Display {&#10;             // Finalizar edição&#10;             g2d.dispose();&#10; &#10;-            // 6. Salvar a imagem editada em JPG&#10;-            ImageIO.write(imagem, &quot;jpg&quot;, new File(&quot;saida/leitura_do_hidrometro.jpg&quot;));&#10;+            // 6. Salvar a imagem editada em JPG com ID único&#10;+            String nomeArquivo = (simuladorId == 1) ?&#10;+                &quot;saida/leitura_do_hidrometro.jpg&quot; :  // Compatibilidade com original&#10;+                &quot;saida/leitura_do_hidrometro_&quot; + simuladorId + &quot;.jpg&quot;;&#10;+            ImageIO.write(imagem, &quot;jpg&quot;, new File(nomeArquivo));&#10; &#10;            // System.out.println(&quot;Imagem editada com sucesso! &quot; + numeroDisplay);&#10;         } catch (Exception e) {&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>